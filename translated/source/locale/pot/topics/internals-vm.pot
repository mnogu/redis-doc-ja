# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/internals-vm.rst:1
# 5e1f5c31fb924ab28313bf6ca56496ad
msgid "UPDATE: Virtual Memory is deprecated since Redis 2.6, so this documentation is here only for historical reasons."
msgstr ""

#: ../../source/topics/internals-vm.rst:5
# 4e0c381fdd56410dbfada25c4059423b
msgid "Virtual Memory technical specification"
msgstr ""

#: ../../source/topics/internals-vm.rst:7
# a0a7cd00321f47d493e1f8210dbd1b9a
msgid "This document details the internals of the Redis Virtual Memory subsystem. The intended audience is not the final user but programmers willing to understand or modify the Virtual Memory implementation."
msgstr ""

#: ../../source/topics/internals-vm.rst:12
# 72f18af224414403a82d05302656d05b
msgid "Keys vs Values: what is swapped out?"
msgstr ""

#: ../../source/topics/internals-vm.rst:14
# af71bc2e1ad746d2b59bf4d8171691cf
msgid "The goal of the VM subsystem is to free memory transferring Redis Objects from memory to disk. This is a very generic command, but specifically, Redis transfers only objects associated with *values*. In order to understand better this concept we'll show, using the DEBUG command, how a key holding a value looks from the point of view of the Redis internals:"
msgstr ""

#: ../../source/topics/internals-vm.rst:28
# 0ad5c700769641279963130fe909e99e
msgid "As you can see from the above output, the Redis top level hash table maps Redis Objects (keys) to other Redis Objects (values). The Virtual Memory is only able to swap *values* on disk, the objects associated to *keys* are always taken in memory: this trade off guarantees very good lookup performances, as one of the main design goals of the Redis VM is to have performances similar to Redis with VM disabled when the part of the dataset frequently used fits in RAM."
msgstr ""

#: ../../source/topics/internals-vm.rst:37
# 98f9156bba9a434f8847fe502345eda6
msgid "How does a swapped value looks like internally"
msgstr ""

#: ../../source/topics/internals-vm.rst:39
# f1eb251ef2634b0a9d9c52c219b78697
msgid "When an object is swapped out, this is what happens in the hash table entry:"
msgstr ""

#: ../../source/topics/internals-vm.rst:42
# c36b051df11c4564b5196178d920d7e3
msgid "The key continues to hold a Redis Object representing the key."
msgstr ""

#: ../../source/topics/internals-vm.rst:43
# 6dba6af6279346e1be0687bb20b6ef3b
msgid "The value is set to NULL"
msgstr ""

#: ../../source/topics/internals-vm.rst:45
# 711484683052494baf1e5b280fff018d
msgid "So you may wonder where we store the information that a given value (associated to a given key) was swapped out. Just in the key object!"
msgstr ""

#: ../../source/topics/internals-vm.rst:48
# 8850f87eafd14a96bc11085c34f055df
msgid "This is how the Redis Object structure *robj* looks like:"
msgstr ""

#: ../../source/topics/internals-vm.rst:69
# 3b86edd630544b798b0102cded864a0f
msgid "As you can see there are a few fields about VM. The most important one is *storage*, that can be one of this values:"
msgstr ""

#: ../../source/topics/internals-vm.rst:72
# 467f05887b3247a5ace6017c6b3ea874
msgid "REDIS\\_VM\\_MEMORY: the associated value is in memory."
msgstr ""

#: ../../source/topics/internals-vm.rst:73
# 5e32412cc7bd46db8570ff93154a2943
msgid "REDIS\\_VM\\_SWAPPED: the associated values is swapped, and the value entry of the hash table is just set to NULL."
msgstr ""

#: ../../source/topics/internals-vm.rst:75
# a08a886dac384c738aa02da1af9349e5
msgid "REDIS\\_VM\\_LOADING: the value is swapped on disk, the entry is NULL, but there is a job to load the object from the swap to the memory (this field is only used when threaded VM is active)."
msgstr ""

#: ../../source/topics/internals-vm.rst:78
# d6500d18b25646ceb36ae30d07cbad8f
msgid "REDIS\\_VM\\_SWAPPING: the value is in memory, the entry is a pointer to the actual Redis Object, but there is an I/O job in order to transfer this value to the swap file."
msgstr ""

#: ../../source/topics/internals-vm.rst:82
# 8362568be344475497b30c78a5ae2daa
msgid "If an object is swapped on disk (REDIS\\_VM\\_SWAPPED or REDIS\\_VM\\_LOADING), how do we know where it is stored, what type it is, and so forth? That's simple: the *vtype* field is set to the original type of the Redis object swapped, while the *vm* field (that is a *redisObjectVM* structure) holds information about the location of the object. This is the definition of this additional structure:"
msgstr ""

#: ../../source/topics/internals-vm.rst:98
# 1949ccc5a4874750bfc8be4fdbddfe9a
msgid "As you can see the structure contains the page at which the object is located in the swap file, the number of pages used, and the last access time of the object (this is very useful for the algorithm that select what object is a good candidate for swapping, as we want to transfer on disk objects that are rarely accessed)."
msgstr ""

#: ../../source/topics/internals-vm.rst:104
# 2404c368569042ac94ea913315a0168d
msgid "As you can see, while all the other fields are using unused bytes in the old Redis Object structure (we had some free bit due to natural memory alignment concerns), the *vm* field is new, and indeed uses additional memory. Should we pay such a memory cost even when VM is disabled? No! This is the code to create a new Redis Object:"
msgstr ""

#: ../../source/topics/internals-vm.rst:121
# 52fd45de8d8940b1ab55e5e5cb488817
msgid "As you can see if the VM system is not enabled we allocate just ``sizeof(*o)-sizeof(struct redisObjectVM)`` of memory. Given that the *vm* field is the last in the object structure, and that this fields are never accessed if VM is disabled, we are safe and Redis without VM does not pay the memory overhead."
msgstr ""

#: ../../source/topics/internals-vm.rst:128
# 621ca458d98c4400ac167ac6b2039319
msgid "The Swap File"
msgstr ""

#: ../../source/topics/internals-vm.rst:130
# 88a412ed14cd4846b5d8254eb9cc868e
msgid "The next step in order to understand how the VM subsystem works is understanding how objects are stored inside the swap file. The good news is that's not some kind of special format, we just use the same format used to store the objects in .rdb files, that are the usual dump files produced by Redis using the SAVE command."
msgstr ""

#: ../../source/topics/internals-vm.rst:136
# 313097b7a147409181c0a60cfc761e10
msgid "The swap file is composed of a given number of pages, where every page size is a given number of bytes. This parameters can be changed in redis.conf, since different Redis instances may work better with different values: it depends on the actual data you store inside it. The following are the default values:"
msgstr ""

#: ../../source/topics/internals-vm.rst:147
# d1b0cd491f2842c8aac2e2b3924b5432
msgid "Redis takes a \"bitmap\" (an contiguous array of bits set to zero or one) in memory, every bit represent a page of the swap file on disk: if a given bit is set to 1, it represents a page that is already used (there is some Redis Object stored there), while if the corresponding bit is zero, the page is free."
msgstr ""

#: ../../source/topics/internals-vm.rst:153
# b5f90e9c644c41f88fec20b2c47e848d
msgid "Taking this bitmap (that will call the page table) in memory is a huge win in terms of performances, and the memory used is small: we just need 1 bit for every page on disk. For instance in the example below 134217728 pages of 32 bytes each (4GB swap file) is using just 16 MB of RAM for the page table."
msgstr ""

#: ../../source/topics/internals-vm.rst:160
# 78a48c86f46445cfa1dc451540859d61
msgid "Transferring objects from memory to swap"
msgstr ""

#: ../../source/topics/internals-vm.rst:162
# 0965477de8ae4ecbb3ebac300933db5c
msgid "In order to transfer an object from memory to disk we need to perform the following steps (assuming non threaded VM, just a simple blocking approach):"
msgstr ""

#: ../../source/topics/internals-vm.rst:166
# 74aea3dabcdc4a0c9ab6d3fc46c65c12
msgid "Find how many pages are needed in order to store this object on the swap file. This is trivially accomplished just calling the function ``rdbSavedObjectPages`` that returns the number of pages used by an object on disk. Note that this function does not duplicate the .rdb saving code just to understand what will be the length *after* an object will be saved on disk, we use the trick of opening /dev/null and writing the object there, finally calling ``ftello`` in order check the amount of bytes required. What we do basically is to save the object on a virtual very fast file, that is, /dev/null."
msgstr ""

#: ../../source/topics/internals-vm.rst:175
# fdcc17b0d4fb480a87d9b17488d4b671
msgid "Now that we know how many pages are required in the swap file, we need to find this number of contiguous free pages inside the swap file. This task is accomplished by the ``vmFindContiguousPages`` function. As you can guess this function may fail if the swap is full, or so fragmented that we can't easily find the required number of contiguous free pages. When this happens we just abort the swapping of the object, that will continue to live in memory."
msgstr ""

#: ../../source/topics/internals-vm.rst:182
# aa5a08da24374d69a5d3330ab457ecf7
msgid "Finally we can write the object on disk, at the specified position, just calling the function ``vmWriteObjectOnSwap``."
msgstr ""

#: ../../source/topics/internals-vm.rst:185
# ee7554c00a8e44368eaa15e2049055c8
msgid "As you can guess once the object was correctly written in the swap file, it is freed from memory, the storage field in the associated key is set to REDIS\\_VM\\_SWAPPED, and the used pages are marked as used in the page table."
msgstr ""

#: ../../source/topics/internals-vm.rst:191
# 41d97d38c8dc491a835af443a4d42739
msgid "Loading objects back in memory"
msgstr ""

#: ../../source/topics/internals-vm.rst:193
# baa8136fbbb84b0dad4ccac40fe21c40
msgid "Loading an object from swap to memory is simpler, as we already know where the object is located and how many pages it is using. We also know the type of the object (the loading functions are required to know this information, as there is no header or any other information about the object type on disk), but this is stored in the *vtype* field of the associated key as already seen above."
msgstr ""

#: ../../source/topics/internals-vm.rst:200
# 1ffa4139103b477ba55dbf263e96a46f
msgid "Calling the function ``vmLoadObject`` passing the key object associated to the value object we want to load back is enough. The function will also take care of fixing the storage type of the key (that will be REDIS\\_VM\\_MEMORY), marking the pages as freed in the page table, and so forth."
msgstr ""

#: ../../source/topics/internals-vm.rst:206
# f56f33c35acc441c8f5152fa141bdf52
msgid "The return value of the function is the loaded Redis Object itself, that we'll have to set again as value in the main hash table (instead of the NULL value we put in place of the object pointer when the value was originally swapped out)."
msgstr ""

#: ../../source/topics/internals-vm.rst:212
# 9dc3cddae8f4469ba8408972c31701b4
msgid "How blocking VM works"
msgstr ""

#: ../../source/topics/internals-vm.rst:214
# 4573558aacad4128a488368be2325d38
msgid "Now we have all the building blocks in order to describe how the blocking VM works. First of all, an important detail about configuration. In order to enable blocking VM in Redis ``server.vm_max_threads`` must be set to zero. We'll see later how this max number of threads info is used in the threaded VM, for now all it's needed to now is that Redis reverts to fully blocking VM when this is set to zero."
msgstr ""

#: ../../source/topics/internals-vm.rst:222
# 11df9f89298c4622a7f27779a1566d01
msgid "We also need to introduce another important VM parameter, that is, ``server.vm_max_memory``. This parameter is very important as it is used in order to trigger swapping: Redis will try to swap objects only if it is using more memory than the max memory setting, otherwise there is no need to swap as we are matching the user requested memory usage."
msgstr ""

#: ../../source/topics/internals-vm.rst:229
# b21dabf0518b45bf961705ba1ee018a7
msgid "Blocking VM swapping"
msgstr ""

#: ../../source/topics/internals-vm.rst:231
# 4ac36400a9d34d59ba1f064460b823e6
msgid "Swapping of object from memory to disk happens in the cron function. This function used to be called every second, while in the recent Redis versions on git it is called every 100 milliseconds (that is, 10 times per second). If this function detects we are out of memory, that is, the memory used is greater than the vm-max-memory setting, it starts transferring objects from memory to disk in a loop calling the function ``vmSwapOneObect``. This function takes just one argument, if 0 it will swap objects in a blocking way, otherwise if it is 1, I/O threads are used. In the blocking scenario we just call it with zero as argument."
msgstr ""

#: ../../source/topics/internals-vm.rst:241
# a184dc3db365444d95992d75dd94ff78
msgid "vmSwapOneObject acts performing the following steps:"
msgstr ""

#: ../../source/topics/internals-vm.rst:243
# 15c1135415eb469fa7420fb06e09b167
msgid "The key space in inspected in order to find a good candidate for swapping (we'll see later what a good candidate for swapping is)."
msgstr ""

#: ../../source/topics/internals-vm.rst:245
# 9c37feff2afb41588b6e512593ea26cc
msgid "The associated value is transferred to disk, in a blocking way."
msgstr ""

#: ../../source/topics/internals-vm.rst:246
# 65aa9e5a22764568a0b67bd6dc9c17d1
msgid "The key storage field is set to REDIS\\_VM\\_SWAPPED, while the *vm* fields of the object are set to the right values (the page index where the object was swapped, and the number of pages used to swap it)."
msgstr ""

#: ../../source/topics/internals-vm.rst:250
# a8901c5178c346d4aebc0b242d2ce5f2
msgid "Finally the value object is freed and the value entry of the hash table is set to NULL."
msgstr ""

#: ../../source/topics/internals-vm.rst:253
# 07ce34b1d3374ea1bcb1b0613b81a599
msgid "The function is called again and again until one of the following happens: there is no way to swap more objects because either the swap file is full or nearly all the objects are already transferred on disk, or simply the memory usage is already under the vm-max-memory parameter."
msgstr ""

#: ../../source/topics/internals-vm.rst:259
# 2a22b36dc1dd4177b99df5aadd65251a
msgid "What values to swap when we are out of memory?"
msgstr ""

#: ../../source/topics/internals-vm.rst:261
# 849231fe9dfe4da99337bde1e05b7724
msgid "Understanding what's a good candidate for swapping is not too hard. A few objects at random are sampled, and for each their *swappability* is commuted as:"
msgstr ""

#: ../../source/topics/internals-vm.rst:269
# b26d9b00e8e24cf28edac1570ee842e8
msgid "The age is the number of seconds the key was not requested, while size\\_in\\_memory is a fast estimation of the amount of memory (in bytes) used by the object in memory. So we try to swap out objects that are rarely accessed, and we try to swap bigger objects over smaller one, but the latter is a less important factor (because of the logarithmic function used). This is because we don't want bigger objects to be swapped out and in too often as the bigger the object the more I/O and CPU is required in order to transfer it."
msgstr ""

#: ../../source/topics/internals-vm.rst:279
# 2ef51a47f18744f9a639457652635ccf
msgid "Blocking VM loading"
msgstr ""

#: ../../source/topics/internals-vm.rst:281
# 3a703c922ddb4703995d8b0643ece2a9
msgid "What happens if an operation against a key associated with a swapped out object is requested? For instance Redis may just happen to process the following command:"
msgstr ""

#: ../../source/topics/internals-vm.rst:289
# 3e86d5c93def448a8cd239ea39757b90
msgid "If the value object of the ``foo`` key is swapped we need to load it back in memory before processing the operation. In Redis the key lookup process is centralized in the ``lookupKeyRead`` and ``lookupKeyWrite`` functions, this two functions are used in the implementation of all the Redis commands accessing the keyspace, so we have a single point in the code where to handle the loading of the key from the swap file to memory."
msgstr ""

#: ../../source/topics/internals-vm.rst:297
# 295d0f5850c94baab4c2522c9526f7cb
msgid "So this is what happens:"
msgstr ""

#: ../../source/topics/internals-vm.rst:299
# 0939e45d50ad4d39a1054408687f5667
msgid "The user calls some command having as argument a swapped key"
msgstr ""

#: ../../source/topics/internals-vm.rst:300
# 8214fc42b5934d8bb1a46b7a6d89e56f
msgid "The command implementation calls the lookup function"
msgstr ""

#: ../../source/topics/internals-vm.rst:301
# 9c50658262db4c0cbd74f5c867aefb69
msgid "The lookup function search for the key in the top level hash table. If the value associated with the requested key is swapped (we can see that checking the *storage* field of the key object), we load it back in memory in a blocking way before to return to the user."
msgstr ""

#: ../../source/topics/internals-vm.rst:306
# de7f1f1bdd604ebca1663df3109e5719
msgid "This is pretty straightforward, but things will get more *interesting* with the threads. From the point of view of the blocking VM the only real problem is the saving of the dataset using another process, that is, handling BGSAVE and BGREWRITEAOF commands."
msgstr ""

#: ../../source/topics/internals-vm.rst:312
# e88022ef3e544245a088b128be07a3bc
msgid "Background saving when VM is active"
msgstr ""

#: ../../source/topics/internals-vm.rst:314
# f943dcca2bbb4923ac9b0d228480a39b
msgid "The default Redis way to persist on disk is to create .rdb files using a child process. Redis calls the fork() system call in order to create a child, that has the exact copy of the in memory dataset, since fork duplicates the whole program memory space (actually thanks to a technique called Copy on Write memory pages are shared between the parent and child process, so the fork() call will not require too much memory)."
msgstr ""

#: ../../source/topics/internals-vm.rst:322
# e6fb1ffb92de40beaeddbed2d7dc2757
msgid "In the child process we have a copy of the dataset in a given point in the time. Other commands issued by clients will just be served by the parent process and will not modify the child data."
msgstr ""

#: ../../source/topics/internals-vm.rst:326
# 67261250929b4e718982dfaff657cba7
msgid "The child process will just store the whole dataset into the dump.rdb file and finally will exit. But what happens when the VM is active? Values can be swapped out so we don't have all the data in memory, and we need to access the swap file in order to retrieve the swapped values. While child process is saving the swap file is shared between the parent and child process, since:"
msgstr ""

#: ../../source/topics/internals-vm.rst:333
# 3badebd8a35941959d2f1d2d31fc4ee7
msgid "The parent process needs to access the swap file in order to load values back into memory if an operation against swapped out values are performed."
msgstr ""

#: ../../source/topics/internals-vm.rst:336
# bc57e0f81ec34d9eb87b84c41bda1ef3
msgid "The child process needs to access the swap file in order to retrieve the full dataset while saving the data set on disk."
msgstr ""

#: ../../source/topics/internals-vm.rst:339
# 82deaf0dcfda46c1837ed7fba3ecaf1b
msgid "In order to avoid problems while both the processes are accessing the same swap file we do a simple thing, that is, not allowing values to be swapped out in the parent process while a background saving is in progress. This way both the processes will access the swap file in read only. This approach has the problem that while the child process is saving no new values can be transferred on the swap file even if Redis is using more memory than the max memory parameters dictates. This is usually not a problem as the background saving will terminate in a short amount of time and if still needed a percentage of values will be swapped on disk ASAP."
msgstr ""

#: ../../source/topics/internals-vm.rst:350
# 301fec3b073b43888e8d1849bd9c54cb
msgid "An alternative to this scenario is to enable the Append Only File that will have this problem only when a log rewrite is performed using the BGREWRITEAOF command."
msgstr ""

#: ../../source/topics/internals-vm.rst:355
# ac1149e5e5d74da198a731b481acb323
msgid "The problem with the blocking VM"
msgstr ""

#: ../../source/topics/internals-vm.rst:357
# 75d7489d4d484ce3907f5863af059666
msgid "The problem of blocking VM is that... it's blocking :) This is not a problem when Redis is used in batch processing activities, but for real-time usage one of the good points of Redis is the low latency. The blocking VM will have bad latency behaviors as when a client is accessing a swapped out value, or when Redis needs to swap out values, no other clients will be served in the meantime."
msgstr ""

#: ../../source/topics/internals-vm.rst:364
# 2632ee1fbbe142e78a2d78c4c9562c6f
msgid "Swapping out keys should happen in background. Similarly when a client is accessing a swapped out value other clients accessing in memory values should be served mostly as fast as when VM is disabled. Only the clients dealing with swapped out keys should be delayed."
msgstr ""

#: ../../source/topics/internals-vm.rst:369
# a3cdcd44f97f4208a4bc88e49b7080d7
msgid "All this limitations called for a non-blocking VM implementation."
msgstr ""

#: ../../source/topics/internals-vm.rst:372
# 881657cd9f154a98923a8fca689dcaed
msgid "Threaded VM"
msgstr ""

#: ../../source/topics/internals-vm.rst:374
# c9bf9885c467491d91484c8f22f00ea1
msgid "There are basically three main ways to turn the blocking VM into a non blocking one. \\* 1: One way is obvious, and in my opionion, not a good idea at all, that is, turning Redis itself into a theaded server: if every request is served by a different thread automatically other clients don't need to wait for blocked ones. Redis is fast, exports atomic operations, has no locks, and is just 10k lines of code, *because* it is single threaded, so this was not an option for me. \\* 2: Using non-blocking I/O against the swap file. After all you can think Redis already event-loop based, why don't just handle disk I/O in a non-blocking fashion? I also discarded this possiblity because of two main reasons. One is that non blocking file operations, unlike sockets, are an incompatibility nightmare. It's not just like calling select, you need to use OS-specific things. The other problem is that the I/O is just one part of the time consumed to handle VM, another big part is the CPU used in order to encode/decode data to/from the swap file. This is I picked option three, that is... \\* 3: Using I/O threads, that is, a pool of threads handling the swap I/O operations. This is what the Redis VM is using, so let's detail how this works."
msgstr ""

#: ../../source/topics/internals-vm.rst:394
# 854f0e2662964d4398b6dd6b74d367e0
msgid "I/O Threads"
msgstr ""

#: ../../source/topics/internals-vm.rst:396
# c43e3f2d5d494a63abec16e95a362540
msgid "The threaded VM design goals where the following, in order of importance:"
msgstr ""

#: ../../source/topics/internals-vm.rst:399
# 086402414acf42778249a4c03be00339
msgid "Simple implementation, little room for race conditions, simple locking, VM system more or less completely decoupled from the rest of Redis code."
msgstr ""

#: ../../source/topics/internals-vm.rst:402
# 207513caa64441d98304981da6f17a5a
msgid "Good performances, no locks for clients accessing values in memory."
msgstr ""

#: ../../source/topics/internals-vm.rst:403
# 22a66c4d99db46d99b2ada90bd0ea777
msgid "Ability to decode/encode objects in the I/O threads."
msgstr ""

#: ../../source/topics/internals-vm.rst:405
# b26ecc54a6c040b2b60f93c6f37d73ec
msgid "The above goals resulted in an implementation where the Redis main thread (the one serving actual clients) and the I/O threads communicate using a queue of jobs, with a single mutex. Basically when main thread requires some work done in the background by some I/O thread, it pushes an I/O job structure in the ``server.io_newjobs`` queue (that is, just a linked list). If there are no active I/O threads, one is started. At this point some I/O thread will process the I/O job, and the result of the processing is pushed in the ``server.io_processed`` queue. The I/O thread will send a byte using an UNIX pipe to the main thread in order to signal that a new job was processed and the result is ready to be processed."
msgstr ""

#: ../../source/topics/internals-vm.rst:417
# 7ac3f22326cb4c8b865f8789ea5b2710
msgid "This is how the ``iojob`` structure looks like:"
msgstr ""

#: ../../source/topics/internals-vm.rst:433
# 616fe423607d43a593be996fc3b34b63
msgid "There are just three type of jobs that an I/O thread can perform (the type is specified by the ``type`` field of the structure):"
msgstr ""

#: ../../source/topics/internals-vm.rst:436
# 4fac0354e9af4d00b5cd151eb0794051
msgid "REDIS\\_IOJOB\\_LOAD: load the value associated to a given key from swap to memory. The object offset inside the swap file is ``page``, the object type is ``key->vtype``. The result of this operation will populate the ``val`` field of the structure."
msgstr ""

#: ../../source/topics/internals-vm.rst:440
# a8cb81de17e644b08bc52d98fc9bf9a1
msgid "REDIS\\_IOJOB\\_PREPARE\\_SWAP: compute the number of pages needed in order to save the object pointed by ``val`` into the swap. The result of this operation will populate the ``pages`` field."
msgstr ""

#: ../../source/topics/internals-vm.rst:443
# d002cfa43433463d893a91370853c15f
msgid "REDIS\\_IOJOB\\_DO\\_SWAP: Transfer the object pointed by ``val`` to the swap file, at page offset ``page``."
msgstr ""

#: ../../source/topics/internals-vm.rst:446
# 4763d76bd8364a18a25d208d7d1d81aa
msgid "The main thread delegates just the above three tasks. All the rest is handled by the main thread itself, for instance finding a suitable range of free pages in the swap file page table (that is a fast operation), deciding what object to swap, altering the storage field of a Redis object to reflect the current state of a value."
msgstr ""

#: ../../source/topics/internals-vm.rst:453
# 16bedfcc31f64c049d82968ec116e665
msgid "Non blocking VM as probabilistic enhancement of blocking VM"
msgstr ""

#: ../../source/topics/internals-vm.rst:455
# d80da0d1c30f448c869365946c773215
msgid "So now we have a way to request background jobs dealing with slow VM operations. How to add this to the mix of the rest of the work done by the main thread? While blocking VM was aware that an object was swapped out just when the object was looked up, this is too late for us: in C it is not trivial to start a background job in the middle of the command, leave the function, and re-enter in the same point the computation when the I/O thread finished what we requested (that is, no co-routines or continuations or alike)."
msgstr ""

#: ../../source/topics/internals-vm.rst:464
# 9a4afc806df04b0d910c0bc6ff816b9e
msgid "Fortunately there was a much, much simpler way to do this. And we love simple things: basically consider the VM implementation a blocking one, but add an optimization (using non the no blocking VM operations we are able to perform) to make the blocking *very* unlikely."
msgstr ""

#: ../../source/topics/internals-vm.rst:469
# 24e53b1fc6ea49b580c846fe7c48bdf9
msgid "This is what we do:"
msgstr ""

#: ../../source/topics/internals-vm.rst:471
# 42a8860bd07341a39a7722c3f00b26a6
msgid "Every time a client sends us a command, *before* the command is executed, we examine the argument vector of the command in search for swapped keys. After all we know for every command what arguments are keys, as the Redis command format is pretty simple."
msgstr ""

#: ../../source/topics/internals-vm.rst:475
# d069c5d6d6f940a6b137161ce0bc996a
msgid "If we detect that at least a key in the requested command is swapped on disk, we block the client instead of really issuing the command. For every swapped value associated to a requested key, an I/O job is created, in order to bring the values back in memory. The main thread continues the execution of the event loop, without caring about the blocked client."
msgstr ""

#: ../../source/topics/internals-vm.rst:481
# 33a8bc403c5340ab84eda8c5f568c788
msgid "In the meanwhile, I/O threads are loading values in memory. Every time an I/O thread finished loading a value, it sends a byte to the main thread using an UNIX pipe. The pipe file descriptor has a readable event associated in the main thread event loop, that is the function ``vmThreadedIOCompletedJob``. If this function detects that all the values needed for a blocked client were loaded, the client is restarted and the original command called."
msgstr ""

#: ../../source/topics/internals-vm.rst:489
# 0e71262a291041a2936522d2dd0f91c5
msgid "So you can think at this as a blocked VM that almost always happen to have the right keys in memory, since we pause clients that are going to issue commands about swapped out values until this values are loaded."
msgstr ""

#: ../../source/topics/internals-vm.rst:493
# 013ceeafd64b450dbdd2819e74fcb182
msgid "If the function checking what argument is a key fails in some way, there is no problem: the lookup function will see that a given key is associated to a swapped out value and will block loading it. So our non blocking VM reverts to a blocking one when it is not possible to anticipate what keys are touched."
msgstr ""

#: ../../source/topics/internals-vm.rst:499
# 7b5a42dfa83b445aa36a59456ac930a6
msgid "For instance in the case of the SORT command used together with the GET or BY options, it is not trivial to know beforehand what keys will be requested, so at least in the first implementation, SORT BY/GET resorts to the blocking VM implementation."
msgstr ""

#: ../../source/topics/internals-vm.rst:505
# e10e9ed5f7f740ff8e85c6c95eac9af6
msgid "Blocking clients on swapped keys"
msgstr ""

#: ../../source/topics/internals-vm.rst:507
# 014ea0cccf4e450e9ff26411cff13d3a
msgid "How to block clients? To suspend a client in an event-loop based server is pretty trivial. All we do is canceling its read handler. Sometimes we do something different (for instance for BLPOP) that is just marking the client as blocked, but not processing new data (just accumulating the new data into input buffers)."
msgstr ""

#: ../../source/topics/internals-vm.rst:514
# 99c4c6beef4a410e865a23ee32a64ebf
msgid "Aborting I/O jobs"
msgstr ""

#: ../../source/topics/internals-vm.rst:516
# 098deae9e4a4404bb450b612c8ae2d6e
msgid "There is something hard to solve about the interactions between our blocking and non blocking VM, that is, what happens if a blocking operation starts about a key that is also \"interested\" by a non blocking operation at the same time?"
msgstr ""

#: ../../source/topics/internals-vm.rst:521
# ef84eaa28da24eaba3fe3e39496a5e6c
msgid "For instance while SORT BY is executed, a few keys are being loaded in a blocking manner by the sort command. At the same time, another client may request the same keys with a simple *GET key* command, that will trigger the creation of an I/O job to load the key in background."
msgstr ""

#: ../../source/topics/internals-vm.rst:526
# 19428f623fee4834b2bf431bb0a84be1
msgid "The only simple way to deal with this problem is to be able to kill I/O jobs in the main thread, so that if a key that we want to load or swap in a blocking way is in the REDIS\\_VM\\_LOADING or REDIS\\_VM\\_SWAPPING state (that is, there is an I/O job about this key), we can just kill the I/O job about this key, and go ahead with the blocking operation we want to perform."
msgstr ""

#: ../../source/topics/internals-vm.rst:533
# c590e89df1424d7aa92925e16979b815
msgid "This is not as trivial as it is. In a given moment an I/O job can be in one of the following three queues:"
msgstr ""

#: ../../source/topics/internals-vm.rst:536
# f41d5299746548ac9ab5168154553948
msgid "server.io\\_newjobs: the job was already queued but no thread is handling it."
msgstr ""

#: ../../source/topics/internals-vm.rst:538
# 96a28bd0990142089f4e6f390e9ab04e
msgid "server.io\\_processing: the job is being processed by an I/O thread."
msgstr ""

#: ../../source/topics/internals-vm.rst:539
# 99843b9c9c3440baa52ccadc626791e4
msgid "server.io\\_processed: the job was already processed. The function able to kill an I/O job is ``vmCancelThreadedIOJob``, and this is what it does:"
msgstr ""

#: ../../source/topics/internals-vm.rst:542
# 2b19f251ebc8405aba06a830e9de68c4
msgid "If the job is in the newjobs queue, that's simple, removing the iojob structure from the queue is enough as no thread is still executing any operation."
msgstr ""

#: ../../source/topics/internals-vm.rst:545
# 600de3adcb7841ee98430bb0c9329ca2
msgid "If the job is in the processing queue, a thread is messing with our job (and possibly with the associated object!). The only thing we can do is waiting for the item to move to the next queue in a *blocking way*. Fortunately this condition happens very rarely so it's not a performance problem."
msgstr ""

#: ../../source/topics/internals-vm.rst:550
# 9a78719b379e444a90a8fe940e3dad73
msgid "If the job is in the processed queue, we just mark it as *canceled* marking setting the ``canceled`` field to 1 in the iojob structure. The function processing completed jobs will just ignored and free the job instead of really processing it."
msgstr ""

#: ../../source/topics/internals-vm.rst:556
# 5fb294a56750434386f39b03577c6623
msgid "Questions?"
msgstr ""

#: ../../source/topics/internals-vm.rst:558
# 62cefc816a27468ea63f3e82dcbd074d
msgid "This document is in no way complete, the only way to get the whole picture is reading the source code, but it should be a good introduction in order to make the code review / understanding a lot simpler."
msgstr ""

#: ../../source/topics/internals-vm.rst:562
# 14d44cf7d34941bd90a456bc2ca6d89c
msgid "Something is not clear about this page? Please leave a comment and I'll try to address the issue possibly integrating the answer in this document."
msgstr ""

