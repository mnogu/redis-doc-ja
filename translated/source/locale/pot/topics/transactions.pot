# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/transactions.rst:2
# 4bc58aa2fe3b4c02a427ba8076a09ff4
msgid "Transactions"
msgstr ""

#: ../../source/topics/transactions.rst:4
# 69a40e3cef814b9d84d4554cff25cfe6
msgid "``MULTI``, ``EXEC``, ``DISCARD`` and ``WATCH`` are the foundation of transactions in Redis. They allow the execution of a group of commands in a single step, with two important guarantees:"
msgstr ""

#: ../../source/topics/transactions.rst:8
# 90210d253696404ea650bca76f88b9e4
msgid "All the commands in a transaction are serialized and executed sequentially. It can never happen that a request issued by another client is served **in the middle** of the execution of a Redis transaction. This guarantees that the commands are executed as a single isolated operation."
msgstr ""

#: ../../source/topics/transactions.rst:14
# 38ab65217d3040dba804ee70ada8ce52
msgid "Either all of the commands or none are processed, so a Redis transaction is also atomic. The ``EXEC`` command triggers the execution of all the commands in the transaction, so if a client loses the connection to the server in the context of a transaction before calling the ``MULTI`` command none of the operations are performed, instead if the ``EXEC`` command is called, all the operations are performed. When using the `append-only file </topics/persistence#append-only-file>`__ Redis makes sure to use a single write(2) syscall to write the transaction on disk. However if the Redis server crashes or is killed by the system administrator in some hard way it is possible that only a partial number of operations are registered. Redis will detect this condition at restart, and will exit with an error. Using the ``redis-check-aof`` tool it is possible to fix the append only file that will remove the partial transaction so that the server can start again."
msgstr ""

#: ../../source/topics/transactions.rst:31
# 8651827615784e8d9bb7947f9fdf7ead
msgid "Starting with version 2.2, Redis allows for an extra guarantee to the above two, in the form of optimistic locking in a way very similar to a check-and-set (CAS) operation. This is documented `later <#cas>`__ on this page."
msgstr ""

#: ../../source/topics/transactions.rst:37
# 44f171504b9f44f6a1757837167784e8
msgid "Usage"
msgstr ""

#: ../../source/topics/transactions.rst:39
# 66eadb25418c476c909f1b120d94bfb5
msgid "A Redis transaction is entered using the ``MULTI`` command. The command always replies with ``OK``. At this point the user can issue multiple commands. Instead of executing these commands, Redis will queue them. All the commands are executed once ``EXEC`` is called."
msgstr ""

#: ../../source/topics/transactions.rst:44
# 183901a31f294e89a551bfef08c1ea32
msgid "Calling ``DISCARD`` instead will flush the transaction queue and will exit the transaction."
msgstr ""

#: ../../source/topics/transactions.rst:47
# f4fd60c248bc4cc3b984f698bc15d86e
msgid "The following example increments keys ``foo`` and ``bar`` atomically."
msgstr ""

#: ../../source/topics/transactions.rst:61
# 47885f6638ee4637809e70d78f357f78
msgid "As it is possible to see from the session above, ``MULTI`` returns an array of replies, where every element is the reply of a single command in the transaction, in the same order the commands were issued."
msgstr ""

#: ../../source/topics/transactions.rst:65
# 5c65b6bc844e471aae57f9a25b3a4254
msgid "When a Redis connection is in the context of a ``MULTI`` request, all commands will reply with the string ``QUEUED`` (sent as a Status Reply from the point of view of the Redis protocol). A queued command is simply scheduled for execution when ``EXEC`` is called."
msgstr ""

#: ../../source/topics/transactions.rst:71
# d86fc7d186754f93adaa5e31041b4394
msgid "Errors inside a transaction"
msgstr ""

#: ../../source/topics/transactions.rst:73
# a78845319ab8456b94e06abfb4326b34
msgid "During a transaction it is possible to encounter two kind of command errors:"
msgstr ""

#: ../../source/topics/transactions.rst:76
# ea7441464af94dc79fc2f2f546bc3474
msgid "A command may fail to be queued, so there may be an error before ``EXEC`` is called. For instance the command may be syntactically wrong (wrong number of arguments, wrong command name, ...), or there may be some critical condition like an out of memory condition (if the server is configured to have a memory limit using the ``maxmemory`` directive)."
msgstr ""

#: ../../source/topics/transactions.rst:82
# 443a897ad61a4b4986caaf1934046624
msgid "A command may fail *after* ``EXEC`` is called, for instance since we performed an operation against a key with the wrong value (like calling a list operation against a string value)."
msgstr ""

#: ../../source/topics/transactions.rst:86
# 1c754e7256fd4fae93d5a3e68d56f369
msgid "Clients used to sense the first kind of errors, happening before the ``EXEC`` call, by checking the return value of the queued command: if the command replies with QUEUED it was queued correctly, otherwise Redis returns an error. If there is an error while queueing a command, most clients will abort the transaction discarding it."
msgstr ""

#: ../../source/topics/transactions.rst:92
# 7440da8c9a6f4181a0d490aa78848ec3
msgid "However starting with Redis 2.6.5, the server will remember that there was an error during the accumulation of commands, and will refuse to execute the transaction returning also an error during ``EXEC``, and discarding the transcation automatically."
msgstr ""

#: ../../source/topics/transactions.rst:97
# 8838c98b3663409488239128f1847923
msgid "Before Redis 2.6.5 the behavior was to execute the transaction with just the subset of commands queued successfully in case the client called ``EXEC`` regardless of previous errors. The new behavior makes it much more simple to mix transactions with pipelining, so that the whole transaction can be sent at once, reading all the replies later at once."
msgstr ""

#: ../../source/topics/transactions.rst:103
# 04bf58d0afea49a68b707b2cbdbd7aa4
msgid "Errors happening *after* ``EXEC`` instead are not handled in a special way: all the other commands will be executed even if some command fails during the transaction."
msgstr ""

#: ../../source/topics/transactions.rst:107
# 061ea9b2287448619f2d49eee7105290
msgid "This is more clear on the protocol level. In the following example one command will fail when executed even if the syntax is right:"
msgstr ""

#: ../../source/topics/transactions.rst:127
# 9b73f159a1c34f70ab940317296a8ad2
msgid "``EXEC`` returned two-element @bulk-string-reply where one is an ``OK`` code and the other an ``-ERR`` reply. It's up to the client library to find a sensible way to provide the error to the user."
msgstr ""

#: ../../source/topics/transactions.rst:131
# 71dacc0bc18e4ef49964b4c44e23c736
msgid "It's important to note that **even when a command fails, all the other commands in the queue are processed** â€“ Redis will *not* stop the processing of commands."
msgstr ""

#: ../../source/topics/transactions.rst:135
# 011755e3ec004195937e2da840005b68
msgid "Another example, again using the wire protocol with ``telnet``, shows how syntax errors are reported ASAP instead:"
msgstr ""

#: ../../source/topics/transactions.rst:145
# 8303300988c34e19a2bbd76ca0e55a4d
msgid "This time due to the syntax error the bad ``INCR`` command is not queued at all."
msgstr ""

#: ../../source/topics/transactions.rst:149
# cf27c396cef44e42a70a2e3eddb427be
msgid "Why Redis does not support roll backs?"
msgstr ""

#: ../../source/topics/transactions.rst:151
# 8e40efb13ae24dae9f56c778b143e0ae
msgid "If you have a relational databases background, the fact that Redis commands can fail during a transaction, but still Redis will execute the rest of the transaction instead of rolling back, may look odd to you."
msgstr ""

#: ../../source/topics/transactions.rst:155
# 8647b791f5634ddfa3a01ea98f99cc75
msgid "However there are good opinions for this behavior:"
msgstr ""

#: ../../source/topics/transactions.rst:157
# 092180dbdf1f489d8ceae62b57032f05
msgid "Redis commands can fail only if called with a wrong syntax (and the problem is not detectable during the command queueing), or against keys holding the wrong data type: this means that in practical terms a failing command is the result of a programming errors, and a kind of error that is very likely to be detected during development, and not in production."
msgstr ""

#: ../../source/topics/transactions.rst:163
# a775063f8c654e1eae29442e9839dfdc
msgid "Redis is internally simplified and faster because it does not need the ability to roll back."
msgstr ""

#: ../../source/topics/transactions.rst:166
# 4eb082997c774b78aef0f540a4bc33dd
msgid "An argument against Redis point of view is that bugs happen, however it should be noted that in general the roll back does not save you from programming errors. For instance if a query increments a key by 2 instead of 1, or increments the wrong key, there is no way for a rollback mechanism to help. Given that no one can save the programmer from his errors, and that the kind of errors required for a Redis command to fail are unlikely to enter in production, we selected the simpler and faster approach of not supporting roll backs on errors."
msgstr ""

#: ../../source/topics/transactions.rst:176
# fc07983fb9c94b279f6c81b1d448182d
msgid "Discarding the command queue"
msgstr ""

#: ../../source/topics/transactions.rst:178
# 48b9868086724eb9b693e337632c92df
msgid "``DISCARD`` can be used in order to abort a transaction. In this case, no commands are executed and the state of the connection is restored to normal."
msgstr ""

#: ../../source/topics/transactions.rst:196
# 32217826e6e44914b3d78e32e2ea109e
msgid "Optimistic locking using check-and-set"
msgstr ""

#: ../../source/topics/transactions.rst:198
# e14c8857b0274d2eb48f2b9e730d5a66
msgid "``WATCH`` is used to provide a check-and-set (CAS) behavior to Redis transactions."
msgstr ""

#: ../../source/topics/transactions.rst:201
# 9e74ede0d8b94d538caaa1d4a37ebcc0
msgid "``WATCH``\\ ed keys are monitored in order to detect changes against them. If at least one watched key is modified before the ``EXEC`` command, the whole transaction aborts, and ``EXEC`` returns a @nil-reply to notify that the transaction failed."
msgstr ""

#: ../../source/topics/transactions.rst:206
# d9120c22604149e297bb99d2e18e22e5
msgid "For example, imagine we have the need to atomically increment the value of a key by 1 (let's suppose Redis doesn't have ``INCR``)."
msgstr ""

#: ../../source/topics/transactions.rst:209
# 732e52d839044025826880be0088ef6b
msgid "The first try may be the following:"
msgstr ""

#: ../../source/topics/transactions.rst:217
# 441b7eb1e2e6430fa6a991fcaeddd885
msgid "This will work reliably only if we have a single client performing the operation in a given time. If multiple clients try to increment the key at about the same time there will be a race condition. For instance, client A and B will read the old value, for instance, 10. The value will be incremented to 11 by both the clients, and finally ``SET`` as the value of the key. So the final value will be 11 instead of 12."
msgstr ""

#: ../../source/topics/transactions.rst:224
# 1f7e2457256c472a83f480ae0451ce9e
msgid "Thanks to ``WATCH`` we are able to model the problem very well:"
msgstr ""

#: ../../source/topics/transactions.rst:235
# 6cff59e66cfa48bb88a6310bf052eb11
msgid "Using the above code, if there are race conditions and another client modifies the result of ``val`` in the time between our call to ``WATCH`` and our call to ``EXEC``, the transaction will fail."
msgstr ""

#: ../../source/topics/transactions.rst:239
# 8320161ff6e947e9a48eaef4b5d260f7
msgid "We just have to repeat the operation hoping this time we'll not get a new race. This form of locking is called *optimistic locking* and is a very powerful form of locking. In many use cases, multiple clients will be accessing different keys, so collisions are unlikely â€“ usually there's no need to repeat the operation."
msgstr ""

#: ../../source/topics/transactions.rst:246
# ef4ac0acea1f41ada0ef91bece524658
msgid "``WATCH`` explained"
msgstr ""

#: ../../source/topics/transactions.rst:248
# 88826fafa9e2420eb50424a76d8e77c3
msgid "So what is ``WATCH`` really about? It is a command that will make the ``EXEC`` conditional: we are asking Redis to perform the transaction only if no other client modified any of the ``WATCH``\\ ed keys. Otherwise the transaction is not entered at all. (Note that if you ``WATCH`` a volatile key and Redis expires the key after you ``WATCH``\\ ed it, ``EXEC`` will still work. `More on this <http://code.google.com/p/redis/issues/detail?id=270>`__.)"
msgstr ""

#: ../../source/topics/transactions.rst:256
# 7a8374ccf8b04eb592d446fb5fdca0e4
msgid "``WATCH`` can be called multiple times. Simply all the ``WATCH`` calls will have the effects to watch for changes starting from the call, up to the moment ``EXEC`` is called. You can also send any number of keys to a single ``WATCH`` call."
msgstr ""

#: ../../source/topics/transactions.rst:261
# e6463fcafdde45cba649d2a1dbb32687
msgid "When ``EXEC`` is called, all keys are ``UNWATCH``\\ ed, regardless of whether the transaction was aborted or not. Also when a client connection is closed, everything gets ``UNWATCH``\\ ed."
msgstr ""

#: ../../source/topics/transactions.rst:265
# 52cda0280d0947debd4b8fe767375da0
msgid "It is also possible to use the ``UNWATCH`` command (without arguments) in order to flush all the watched keys. Sometimes this is useful as we optimistically lock a few keys, since possibly we need to perform a transaction to alter those keys, but after reading the current content of the keys we don't want to proceed. When this happens we just call ``UNWATCH`` so that the connection can already be used freely for new transactions."
msgstr ""

#: ../../source/topics/transactions.rst:274
# db566a3915c44cf492168bee70c688ee
msgid "Using ``WATCH`` to implement ZPOP"
msgstr ""

#: ../../source/topics/transactions.rst:276
# edc4b3971795465bb577f1029d143804
msgid "A good example to illustrate how ``WATCH`` can be used to create new atomic operations otherwise not supported by Redis is to implement ZPOP, that is a command that pops the element with the lower score from a sorted set in an atomic way. This is the simplest implementation:"
msgstr ""

#: ../../source/topics/transactions.rst:289
# c2d500846a3843ce80ddd2fd8d65c5a0
msgid "If ``EXEC`` fails (i.e. returns a @nil-reply) we just repeat the operation."
msgstr ""

#: ../../source/topics/transactions.rst:293
# e6dffa66d9074aa4b4250bfd41270a49
msgid "Redis scripting and transactions"
msgstr ""

#: ../../source/topics/transactions.rst:295
# f7a74dc9570a4b12949937742fe73a3e
msgid "A `Redis script </commands/eval>`__ is transactional by definition, so everything you can do with a Redis transaction, you can also do with a script, and usually the script will be both simpler and faster."
msgstr ""

#: ../../source/topics/transactions.rst:299
# 00383e68838e49aea952f59a950ba8a2
msgid "This duplication is due to the fact that scripting was introduced in Redis 2.6 while transactions already existed long before. However we are unlikely to remove the support for transactions in the short time because it seems semantically opportune that even without resorting to Redis scripting it is still possible to avoid race conditions, especially since the implementation complexity of Redis transactions is minimal."
msgstr ""

#: ../../source/topics/transactions.rst:307
# 84dc79e23fa346c7ae248bddb8971ec6
msgid "However it is not impossible that in a non immediate future we'll see that the whole user base is just using scripts. If this happens we may deprecate and finally remove transactions."
msgstr ""

