# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/twitter-clone.rst:2
# e07ade0fa2664142b931759a6f4ccab1
msgid "Tutorial: Design and implementation of a simple Twitter clone using PHP and the Redis key-value store"
msgstr ""

#: ../../source/topics/twitter-clone.rst:4
# 0fbaad357836492b924879a3a78fc4e0
msgid "This article describes the design and implementation of a `very simple Twitter clone <https://github.com/antirez/retwis>`__ written using PHP with Redis as the only database. The programming community has traditionally considered key-value stores as a special purpose database that couldn't be used as a drop in replacement for a relational database for the development of web applications. This article will try to show that Redis data structures on top of a key-value layer are an effective data model to implement many kinds of applications."
msgstr ""

#: ../../source/topics/twitter-clone.rst:13
# e1e77b3a79d04b64812f0f2bf6985a97
msgid "Before to continue, you may want to play a few seconds with `the Retwis online demo <http://retwis.redis.io>`__, to check what we are going to actually model. Long story short: it is a toy, but complex enough to be a foundation in order to learn how to create more complex applications."
msgstr ""

#: ../../source/topics/twitter-clone.rst:18
# e0f511baf9a4453bbd9eef42ba76ba1e
msgid "Note: the original version of this article was written in 2009 when Redis was released. It was not exactly clear at the time that the Redis data model was suitable to write entire applications. Now after 5 years there are many cases of applications using Redis as their main store, so the gaol of the article today is to be a tutorial for Redis newcomers. You'll learn how to design a simple data layout using Redis, and how to apply different data structures."
msgstr ""

#: ../../source/topics/twitter-clone.rst:26
# 188c0e34cdd04d68922474b6fcd94827
msgid "Our Twitter clone, called `Retwis <http://retwis.antirez.com>`__, is structurally simple, has very good performance, and can be distributed among any number of web and Redis servers with little efforts. You can find the source code `here <http://code.google.com/p/redis/downloads/list>`__."
msgstr ""

#: ../../source/topics/twitter-clone.rst:32
# 21ee82e76b384b7a8a6a4c6807e42861
msgid "I use PHP for the example since it can be read by everybody. The same (or better) results can be obtained using Ruby, Python, Erlang, and so on. A few clones exist (however not all the clones use the same data layout as the current version of this toturial, so please, stick with the official PHP implementation for the sake of following the article better)."
msgstr ""

#: ../../source/topics/twitter-clone.rst:39
# 0efd33787dae4908ae2cb759e009fead
msgid "`Retwis-RB <http://retwisrb.danlucraft.com/>`__ is a port of Retwis to Ruby and Sinatra written by Daniel Lucraft! Full source code is included of course, and a link to its Git repository appears in the footer of this article. The rest of this article targets PHP, but Ruby programmers can also check the Retwis-RB source code since it's conceptually very similar."
msgstr ""

#: ../../source/topics/twitter-clone.rst:45
# e5ce8c2ea2ee4f5482b7f94e78bdc4e5
msgid "`Retwis-J <http://retwisj.cloudfoundry.com/>`__ is a port of Retwis to Java, using the Spring Data Framework, written by `Costin Leau <http://twitter.com/costinl>`__. Its source code can be found on `GitHub <https://github.com/SpringSource/spring-data-keyvalue-examples>`__, and there is comprehensive documentation available at `springsource.org <http://j.mp/eo6z6I>`__."
msgstr ""

#: ../../source/topics/twitter-clone.rst:53
# d7ac47e7abf14fef82d14c0edb7847aa
msgid "What is a Key-value store?"
msgstr ""

#: ../../source/topics/twitter-clone.rst:55
# e5eb342d2b294db1a1357adad7f1c9ec
msgid "The essence of a key-value store is the ability to store some data, called a *value*, inside a key. The value can be retrieved later only if we know the specific key it was stored in. There is no direct way to search for a key by value. In a sense, it is like a very large hash/dictionary, but it is persistent, i.e. when your application ends, the data doesn't go away. So, for example, I can use the command ``SET`` to store the value *bar* in the key *foo*:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:67
# be8e543c1f3545cbb2f9ec8c9c9ff5fb
msgid "Redis stores data permanently, so if I later ask \"*What is the value stored in key foo?*\\ \" Redis will reply with *bar*:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:74
# aa094bcf0bee4c3788e89c960f678967
msgid "Other common operations provided by key-value stores are ``DEL``, to delete a given key and its associated value, SET-if-not-exists (called ``SETNX`` on Redis), to assign a value to a key only if the key does not already exist, and ``INCR``, to atomically increment a number stored in a given key:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:88
# 8fc4735c87844a14b32b94aba3520e8b
msgid "Atomic operations"
msgstr ""

#: ../../source/topics/twitter-clone.rst:90
# bd82f4a9a9ca4f0ba6a1b1fa30752df1
msgid "There is something special about ``INCR``. Think about why Redis provides such an operation if we can do it ourselves with a bit of code? After all, it is as simple as:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:100
# 6780fb4b6e26487dac83fa7a9f4f4bcb
msgid "The problem is that incrementing this way will work as long as there is only one client working with the key *foo* at one time. See what happens if two clients are accessing this key at the same time:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:113
# e83c707be4174a2c8109c0a7f42220c7
msgid "Something is wrong! We incremented the value two times, but instead of going from 10 to 12, our key holds 11. This is because the increment done with ``GET / increment / SET`` *is not an atomic operation*. Instead the INCR provided by Redis, Memcached, ..., are atomic implementations, and the server will take care of protecting the key during the time needed to complete the increment in order to prevent simultaneous accesses."
msgstr ""

#: ../../source/topics/twitter-clone.rst:121
# 68f9de2ac6054871b09bb0715bd6f744
msgid "What makes Redis different from other key-value stores is that it provides other operations similar to INCR that can be used to model complex problems. This is why you can use Redis to write whole web applications without using another database like an SQL database, and without going crazy."
msgstr ""

#: ../../source/topics/twitter-clone.rst:128
# 30789d5ab7de42a6b067d83b12cdc576
msgid "Beyond key-value stores: lists"
msgstr ""

#: ../../source/topics/twitter-clone.rst:130
# 9a1dda7754a14cde820d9e66ef04f475
msgid "In this section we will see which Redis features we need to build our Twitter clone. The first thing to know is that Redis values can be more than strings. Redis supports Lists, Sets, Hashes, Sorted Sets, Bitmaps, and HyperLogLog types as values, and there are atomic operations to operate on them so we are safe even with multiple accesses to the same key. Let's start with Lists:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:143
# 0ecea7d93f304d01b21082199fd663cb
msgid "``LPUSH`` means *Left Push*, that is, add an element to the left (or to the head) of the list stored in *mylist*. If the key *mylist* does not exist it is automatically created as an empty list before the PUSH operation. As you can imagine, there is also an ``RPUSH`` operation that adds the element to the right of the list (on the tail). This is very useful for our Twitter clone. User updates can be added to a list stored in ``username:updates``, for instance."
msgstr ""

#: ../../source/topics/twitter-clone.rst:151
# 0aa4fca3dd9f4922a9b67a61a75b8347
msgid "There are operations to get data from Lists, of course. For instance, LRANGE returns a range from the list, or the whole list."
msgstr ""

#: ../../source/topics/twitter-clone.rst:158
# 8a03bddb9bbc415d9afbe5238e9e1472
msgid "LRANGE uses zero-based indexes - that is the first element is 0, the second 1, and so on. The command arguments are ``LRANGE key first-index last-index``. The *last-index* argument can be negative, with a special meaning: -1 is the last element of the list, -2 the penultimate, and so on. So, to get the whole list use:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:168
# 7ca2b99aa16345eb825f7548b24c6aff
msgid "Other important operations are LLEN that returns the number of elements in the list, and LTRIM that is like LRANGE but instead of returning the specified range *trims* the list, so it is like *Get range from mylist, Set this range as new value* but does so atomically."
msgstr ""

#: ../../source/topics/twitter-clone.rst:174
# 3e769efa4a824d26ab1c54584ba78293
msgid "The Set data type"
msgstr ""

#: ../../source/topics/twitter-clone.rst:176
# dbd1e611b5c7421e8a1175e258b6a2bc
msgid "Currently we don't use the Set type in this tutorial, but since we use Sorted Sets, which are kind of a more capable version of Sets, it is better to start introducing Sets first (which are a very useful data structure per se), and later Sorted Sets."
msgstr ""

#: ../../source/topics/twitter-clone.rst:181
# ea5864adb5b64866bd177f9472e57a9e
msgid "There are more data types than just Lists. Redis also supports Sets, which are unsorted collections of elements. It is possible to add, remove, and test for existence of members, and perform the intersection between different Sets. Of course it is possible to get the elements of a set. Some examples will make it more clear. Keep in mind that ``SADD`` is the *add to set* operation, ``SREM`` is the *remove from set* operation, *sismember* is the *test if member* operation, and ``SINTER`` is the *perform intersection* operation. Other operations are ``SCARD`` to get the cardinality (the number of elements) of a Set, and ``SMEMBERS`` to return all the members of a Set."
msgstr ""

#: ../../source/topics/twitter-clone.rst:201
# d91b1217524b443ea3e01f48423afdce
msgid "Note that ``SMEMBERS`` does not return the elements in the same order we added them since Sets are *unsorted* collections of elements. When you want to store in order it is better to use Lists instead. Some more operations against Sets:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:213
# 95df56e96a8d4b0bb38addba937afa3b
msgid "``SINTER`` can return the intersection between Sets but it is not limited to two sets. You may ask for the intersection of 4,5, or 10000 Sets. Finally let's check how SISMEMBER works:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:223
# be6cd4fa20a64f9e89b24e08dd144b0a
msgid "The Sorted Set data type"
msgstr ""

#: ../../source/topics/twitter-clone.rst:225
# 0e0eb65ac0ac42ceb4e3a99c3221a35c
msgid "Sorted Sets are similar to Sets: collection of elements. However in Sorted Sets each element is associated with a floating point value, called the *element score*. Because of the score, elements inside a sorted set are ordered, since we can always compare two elements by score (and if the score happens to be the same, we compare the two elements as strings)."
msgstr ""

#: ../../source/topics/twitter-clone.rst:232
# d2bac7dd85c84b7c9dd39191b2487527
msgid "Like Sets in Sorted Sets it is not possible to add repeated elements, every element is unique. However it is possible to update an element's score."
msgstr ""

#: ../../source/topics/twitter-clone.rst:236
# bfceea8ee30945eab1c72dbe19c12f20
msgid "Sorted Set commands are prefixed with ``Z``. The following is an example of Sorted Sets usage:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:246
# 58086c6fb87c471d9aebd5f9124a0932
msgid "In the above example we added a few elements with ``ZADD``, and later retrivied the elements with ``ZRANGE``. As you can see the elements are returned in order according to their score. In order to check if a given element exists, and also to retrieve its score if it exists, we use the ``ZSCORE`` command:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:257
# 1e5801e4b11945919e77d16693a1a947
msgid "Sorted Sets are a very powerful data structure, you can query elements by score range, lexocographically, in reverse order, and so forth. To know more `please check the Sorted Set sections in the official Redis commands documentation <http://redis.io/commands/#sorted_set>`__."
msgstr ""

#: ../../source/topics/twitter-clone.rst:263
# c7fbb3f6535844b9a7a6ceedee78197b
msgid "The Hash data type"
msgstr ""

#: ../../source/topics/twitter-clone.rst:265
# c5fd455bafd24f15a76fd654c3a74649
msgid "This is the last data structure we use in our program, and is extremely easy to gasp since there is an equivalent in almost every programming language out there: Hashes. Redis Hashes are basically like Ruby or Python hashes, a collection of fields associated with values:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:275
# 6184e1e9c84146d394c81a30b24e9d22
msgid "``HMSET`` can be used to set fields in the hash, that can be retrivied with ``HGET`` later. It is possible to check if a field exists with ``HEXISTS``, or to increment an hash field with ``HINCRBY`` and so forth."
msgstr ""

#: ../../source/topics/twitter-clone.rst:280
# e439a60d1a4f45808779d10259a63dbb
msgid "Hashes are the ideal data structure to represent *objects*. For example we use Hashes in order to represent Users and Updates in our Twitter clone."
msgstr ""

#: ../../source/topics/twitter-clone.rst:284
# 10a46c57ff244bf8a918f1a3531b5c12
msgid "Okay, we just exposed the basics of the Redis main data structures, we are ready to start coding!"
msgstr ""

#: ../../source/topics/twitter-clone.rst:288
# 2b57309c3bd045fab0f651eec4dac1c4
msgid "Prerequisites"
msgstr ""

#: ../../source/topics/twitter-clone.rst:290
# 76bfab34ef374ca4b9162513315c93ea
msgid "If you haven't downloaded the `Retwis source code <https://github.com/antirez/retwis>`__ already please grab it now. It contains a few PHP files, and also a copy of `Predis <https://github.com/nrk/predis>`__, the PHP client library we use in this example."
msgstr ""

#: ../../source/topics/twitter-clone.rst:296
# 5606de10d44e4aeb8d0e5d4467fa2719
msgid "Another thing you probably want is a working Redis server. Just get the source, build with make, run with ./redis-server, and you're ready to go. No configuration is required at all in order to play with or run Retwis on your computer."
msgstr ""

#: ../../source/topics/twitter-clone.rst:302
# a7e76cfd7f5447de838d591ac88a5934
msgid "Data layout"
msgstr ""

#: ../../source/topics/twitter-clone.rst:304
# 20fbbdeb615e40f6adbf3b10cce47f57
msgid "When working with a relational database, a database schema must be designed so that we'd know the tables, indexes, and so on that the database will contain. We don't have tables in Redis, so what do we need to design? We need to identify what keys are needed to represent our objects and what kind of values this keys need to hold."
msgstr ""

#: ../../source/topics/twitter-clone.rst:310
# 4144bc9d7a4b40b5aea023dee44f5066
msgid "Let's start with Users. We need to represent users, of course, with their username, userid, password, the set of users following a given user, the set of users a given user follows, and so on. The first question is, how should we identify a user? Like in a relational DB, a good solution is to identify different users with different numbers, so we can associate a unique ID with every user. Every other reference to this user will be done by id. Creating unique IDs is very simple to do by using our atomic ``INCR`` operation. When we create a new user we can do something like this, assuming the user is called \"antirez\":"
msgstr ""

#: ../../source/topics/twitter-clone.rst:325
# 7bc2fa26b12649c4bcc755747c764bd9
msgid "*Note: you should use an hashed password in a real application, for simplicity we store the password in clear text.*"
msgstr ""

#: ../../source/topics/twitter-clone.rst:328
# 67794d6209c946e6bd3212def5168986
msgid "We use the ``next_user_id`` key in order to always get an unique ID for every new user. Then we use this unique ID to name the key holdign an Hash with user's data. *This is a common design pattern* with key-values stores! Keep it in mind. Besides the fields already defined, we need some more stuff in order to fully define a User. For example, sometimes it can be useful to be able to get the user ID from the username, so every time we add an user, we also populate the ``users`` key, which is an Hash, with the username as field, and its ID as value."
msgstr ""

#: ../../source/topics/twitter-clone.rst:341
# 99dc338cf4d84de1be8a388f1d201045
msgid "This may appear strange at first, but remember that we are only able to access data in a direct way, without secondary indexes. It's not possible to tell Redis to return the key that holds a specific value. This is also *our strength*. This new paradigm is forcing us to organize data so that everything is accessible by *primary key*, speaking in relational DB terms."
msgstr ""

#: ../../source/topics/twitter-clone.rst:349
# 57d01bdcf3104bae80db934aba80d327
msgid "Followers, following, and updates"
msgstr ""

#: ../../source/topics/twitter-clone.rst:351
# d77429fc573d439aaf583b0a41166b60
msgid "There is another central need in our system. A user might have users who follow them, which we'll call their followers. A user might follow other users, which we'll call a following. We have a perfect data structure for this. That is... Sets. The uniqueness of Sets elements, and the fact we can test in constant time for existence, are two interesting features. However what about also remembering the time at which a given user started following another one? In an enhanced version of our simple Twitter clone this may be useful, so instead of using a simple Set, we use a Sorted Set, using the user ID of the following or follower user as element, and the unix time at which the relation between the users was created, as our score."
msgstr ""

#: ../../source/topics/twitter-clone.rst:363
# eb76b225b1f74d069459f8b0327ea257
msgid "So let's define our keys:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:370
# a8a55091576c409cad36f30024b4ec26
msgid "We can add new followers with:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:376
# 782b042c137a40aeb2e74e811cac6e1d
msgid "Another important thing we need is a place were we can add the updates to display in the user's home page. We'll need to access this data in chronological order later, from the most recent update to the oldest, so the perfect kind of data structure for this is a List. Basically every new update will be ``LPUSH``\\ ed in the user updates key, and thanks to ``LRANGE``, we can implement pagination and so on. Note that we use the words *updates* and *posts* interchangeably, since updates are actually \"little posts\" in some way."
msgstr ""

#: ../../source/topics/twitter-clone.rst:389
# 789ac029b08246b894a5a86b2c46c003
msgid "This list is basically the User timeline. We'll push the IDs of her/his own posts, and, the IDs of all the posts of created by the following users. Basically we implement a write fanout."
msgstr ""

#: ../../source/topics/twitter-clone.rst:394
# d0186a232cf248209e6e5ca1e8d9b1d5
msgid "Authentication"
msgstr ""

#: ../../source/topics/twitter-clone.rst:396
# 4dfc70f50b9a4f429a9d9b88e1308a5b
msgid "OK, we have more or less everything about the user except for authentication. We'll handle authentication in a simple but robust way: we don't want to use PHP sessions, our system must be ready to be distributed among different web servers easily, so we'll keep the whole state in our Redis database. All we need is a random **unguessable** string to set as the cookie of an authenticated user, and a key that will contain the user ID of the client holding the string."
msgstr ""

#: ../../source/topics/twitter-clone.rst:404
# a60d3d7457c3459697d09c9ec30fe8a5
msgid "We need two things in order to make this thing work in a robust way. First: the current authentication *secret* (the random unguessable string) should be part of the User object, so when the user is created we also set an ``auth`` field in its Hash:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:413
# 7b8370b12a1442d39af000c6bb92e071
msgid "Moreover, we need a way to map authentication secrets to user IDs, so we also take an ``auths`` key, which has as value an Hash type mapping authentication secrets to user IDs."
msgstr ""

#: ../../source/topics/twitter-clone.rst:421
# 7f846778b0a8424786715222307c9306
msgid "In order to authenticate a user we'll do these simple steps ( see the ``login.php`` file in the Retwis source code): \\* Get the username and password via the login form \\* Check if the ``username`` field actually exists in the ``users`` Hash. \\* If it exists we have the user id, (i.e. 1000) \\* Check if user:1000 password matches, if not, return an error message \\* Ok authenticated! Set \"fea5e81ac8ca77622bed1c2132a021f9\" (the value of user:1000 ``auth`` field) as the \"auth\" cookie."
msgstr ""

#: ../../source/topics/twitter-clone.rst:429
# 6eda8ad84c874feba2394f34232fc546
msgid "This is the actual code:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:455
# c4881cdbfbc94fbeb7f4036b4cb056da
msgid "This happens every time a user logs in, but we also need a function ``isLoggedIn`` in order to check if a given user is already authenticated or not. These are the logical steps preformed by the ``isLoggedIn`` function:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:460
# fbd1c2ffda224f70ad7a6b6147a9bece
msgid "Get the \"auth\" cookie from the user. If there is no cookie, the user is not logged in, of course. Let's call the value of the cookie ``<authcookie>``"
msgstr ""

#: ../../source/topics/twitter-clone.rst:463
# 0bd43b84dd8f476fbc2bda1a87d0c128
msgid "Check if ``<authcookie>`` field in the ``auths`` Hash exists, and what the value (the user ID) is (1000 in the example)."
msgstr ""

#: ../../source/topics/twitter-clone.rst:465
# fea9c97c7f4b404d8b3c1b73f081fc3a
msgid "In order for the system to be more robust, also verify that user:1000 auth field also matches."
msgstr ""

#: ../../source/topics/twitter-clone.rst:467
# d58c4e32bf1b4fa88c760d444b264d59
msgid "OK the user is authenticated, and we loaded a bit of information in the $User global variable."
msgstr ""

#: ../../source/topics/twitter-clone.rst:470
# 05f638c0e85542dfba7b31c1a6ddeb66
msgid "The code is simpler than the description, possibly:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:500
# 2f62295f171d42a093fee11848bebed6
msgid "Having ``loadUserInfo`` as a separate function is overkill for our application, but it's a good approach in a complex application. The only thing that's missing from all the authentication is the logout. What do we do on logout? That's simple, we'll just change the random string in user:1000 ``auth`` field, remove the old authentication secret from the ``auths`` Hash., and add the new one."
msgstr ""

#: ../../source/topics/twitter-clone.rst:507
# f6c1323bc3d84527b35f1f3406804224
msgid "*Important:* the logout procedure explains why we don't just authenticate the user after looking up the authentication secret in the ``auths`` Hash, but double check it against user:1000 ``auth`` field. The true authentication string is the latter, while the ``auths`` Hash is just an authentication field that may even be volatile, or, if there are bugs in the program or a script gets interrupted, we may even end with multiple entries in the ``auths`` key pointing to the same user ID. The logout code is the following (logout.php):"
msgstr ""

#: ../../source/topics/twitter-clone.rst:536
# 0d0e101018384b958f0dbcb406ccef55
msgid "That is just what we described and should be simple to understand."
msgstr ""

#: ../../source/topics/twitter-clone.rst:539
# 42ceb7a007784957a68604718b7c4f15
msgid "Updates"
msgstr ""

#: ../../source/topics/twitter-clone.rst:541
# b7000689ae0842f084550df0a0e425a8
msgid "Updates, also known as posts, are even simpler. In order to create a new post in the database we do something like this:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:549
# 2476b2596abe4c099a5f9381dcc72513
msgid "As you can see each post is just represented by an Hash with three fields. The ID of the user owning the post, the time at which the post was published, and finally the body of the post, which is, the actual status message."
msgstr ""

#: ../../source/topics/twitter-clone.rst:554
# d1a8ce4c56f242c2917b878db328adcb
msgid "After we create a post and we obtain the post ID, we need to LPUSH the ID in the timeline of every user that is following the author of the post, and of course in the list of posts of the author itself (everybody is virtually following herself/himself). This is the file ``post.php`` that shows how this is performed:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:586
# dc5069d79a1046ac942440da85d317a2
msgid "The core of the function is the ``foreach`` loop. We use ``ZRANGE`` to get all the followers of the current user, then the loop will LPUSH the push the post in every follower timeline List."
msgstr ""

#: ../../source/topics/twitter-clone.rst:590
# 973ae6b770404263acbd111d064d0643
msgid "Note that we also maintain a global timeline for all the posts, so that in the Retwis home page we can show everybody's updates easily. This requires just doing an ``LPUSH`` to the ``timeline`` List. Let's face it, aren't you start thinking it was a bit strange to have to sort things added in chronological order using ``ORDER BY`` with SQL? I think so."
msgstr ""

#: ../../source/topics/twitter-clone.rst:597
# 132f5eec84f840f8b4ad102d07ca3ee0
msgid "There is an interesting thing to notice in the code above: we use a new command called ``LTRIM`` after we perform the ``LPUSH`` operation in the global timeline. This is used in order to trim the list to just 1000 elements. The global timeline is actually only used in order to show a few posts in the home page, there is no need to have the full history of all the posts."
msgstr ""

#: ../../source/topics/twitter-clone.rst:604
# 3da4ebfc071a4027a56b71a4fd1649f0
msgid "Basically ``LTRIM`` + ``LPUSH`` is a way to create a *capped collection* in Redis."
msgstr ""

#: ../../source/topics/twitter-clone.rst:608
# 4db5520e5a5b412196bfb9eadefd2100
msgid "Paginating updates"
msgstr ""

#: ../../source/topics/twitter-clone.rst:610
# ff504ddc5cdf4491a00a34e1704bb323
msgid "Now it should be pretty clear how we can use ``LRANGE`` in order to get ranges of posts, and render these posts on the screen. The code is simple:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:643
# 76ff7266939049e1a3ac975062acf469
msgid "``showPost`` will simply convert and print a Post in HTML while ``showUserPosts`` gets a range of posts and then passes them to ``showPosts``."
msgstr ""

#: ../../source/topics/twitter-clone.rst:647
# 8e302b73daa34843bd8d24fe87e3b7ec
msgid "*Note: ``LRANGE`` is not very efficient if the list of posts start to be very big, and we want to access elements which are in the middle of the list, since Redis Lists are backed by linked lists. If a system is designed for deep pagination of million of items, it is better to resort to Sorted Sets instead.*"
msgstr ""

#: ../../source/topics/twitter-clone.rst:654
# fe9778dbd3b945c5aae576b5e0522cbc
msgid "Following users"
msgstr ""

#: ../../source/topics/twitter-clone.rst:656
# 46f85410d9f24be781806f628191b108
msgid "It is not hard, but we did not yet checked how we create following / follower relationships. If user ID 1000 (antirez) wants to follow user ID 5000 (pippo), we need to create both a following and a follower relationship. We just need to ``ZADD`` calls:"
msgstr ""

#: ../../source/topics/twitter-clone.rst:666
# dfd975ea95b84180af1d5dec15384190
msgid "Note the same pattern again and again. In theory with a relational database the list of following and followers would be contained in a single table with fields like ``following_id`` and ``follower_id``. You can extract the followers or following of every user using an SQL query. With a key-value DB things are a bit different since we need to set both the ``1000 is following 5000`` and ``5000 is followed by 1000`` relations. This is the price to pay, but on the other hand accessing the data is simpler and extremely fast. Having these things as separate sets allows us to do interesting stuff. For example, using ``ZINTERSTORE`` we can have the intersection of 'following' of two different users, so we may add a feature to our Twitter clone so that it is able to tell you very quickly when you visit somebody else's profile, \"you and Alice have 34 followers in common\", and things like that."
msgstr ""

#: ../../source/topics/twitter-clone.rst:680
# 9dfaae509ec44af695694ac0961c9927
msgid "You can find the code that sets or removes a following / follower relation in the ``follow.php`` file."
msgstr ""

#: ../../source/topics/twitter-clone.rst:684
# 92f7c936cd8a4eb3a465a9e4d5ccb127
msgid "Making it horizontally scalable"
msgstr ""

#: ../../source/topics/twitter-clone.rst:686
# 202c12cb566f4142b40dfed3f7093996
msgid "Gentle reader, if you reached this point you are already a hero. Thank you. Before talking about scaling horizontally it is worth checking performance on a single server. Retwis is *extremely fast*, without any kind of cache. On a very slow and loaded server, an apache benchmark with 100 parallel clients issuing 100000 requests measured the average pageview to take 5 milliseconds. This means you can serve millions of users every day with just a single Linux box, and this one was monkey ass slow... Imagine the results with more recent hardware."
msgstr ""

#: ../../source/topics/twitter-clone.rst:695
# 04ccd7882ea948738d79fc216d298b47
msgid "However you can't go with a single server forever, how do you scale a key-value store?"
msgstr ""

#: ../../source/topics/twitter-clone.rst:698
# 45c3e72b9e0642d6a6408d2d1d193779
msgid "Retwis does not perform any multi-keys operation, so making it scalable is simple: you may use client-side sharding, or something like a sharding proxy like Twemproxy, or the upcoming Redis Cluster."
msgstr ""

#: ../../source/topics/twitter-clone.rst:702
# ed733e0c9c604d9d84e145d450545929
msgid "To know more about those topics please read `our documentation about sharding </topics/partitioning>`__. However here the point to stress is that in a key-value store, if you design with care, the data set is split among **many independent small keys**. To distribute those keys to multiple nodes is more straightforward and predictable compared to using a semantically more complex database system."
msgstr ""

