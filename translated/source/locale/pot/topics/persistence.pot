# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, antirez
# This file is distributed under the same license as the Redis Documentation (ja) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (ja) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# edaf724f40d94291a48958609591e1eb
#: ../../source/topics/persistence.rst:1
msgid ""
"This page provides a technical description of Redis persistence, it is a "
"suggested read for all the Redis users. For a wider overview of Redis "
"persistence and the durability guarantees it provides you may want to also "
"read `Redis persistence demystified <http://antirez.com/post/redis-"
"persistence-demystified.html>`__."
msgstr ""

# 68bfeb579a304bcebdc27a140db7bdfa
#: ../../source/topics/persistence.rst:8
msgid "Redis Persistence"
msgstr ""

# 89597633771f40d987c4cf6b63fe8687
#: ../../source/topics/persistence.rst:10
msgid "Redis provides a different range of persistence options:"
msgstr ""

# e84502fc37cb49bb90d993c08de3853f
#: ../../source/topics/persistence.rst:12
msgid ""
"The RDB persistence performs point-in-time snapshots of your dataset at "
"specified intervals."
msgstr ""

# fd7fb4d96c37423fa32fd3a3c68facbd
#: ../../source/topics/persistence.rst:14
msgid ""
"the AOF persistence logs every write operation received by the server, that "
"will be played again at server startup, reconstructing the original dataset. "
"Commands are logged using the same format as the Redis protocol itself, in "
"an append-only fashion. Redis is able to rewrite the log on background when "
"it gets too big."
msgstr ""

# 0d8e7c1a2a7046819acc5d24ad33985d
#: ../../source/topics/persistence.rst:19
msgid ""
"If you wish, you can disable persistence at all, if you want your data to "
"just exist as long as the server is running."
msgstr ""

# 40b761922ddc4fa49a509d705402fd8d
#: ../../source/topics/persistence.rst:21
msgid ""
"It is possible to combine both AOF and RDB in the same instance. Notice "
"that, in this case, when Redis restarts the AOF file will be used to "
"reconstruct the original dataset since it is guaranteed to be the most "
"complete."
msgstr ""

# fb4550ea970f4987adf707d6fa136937
#: ../../source/topics/persistence.rst:26
msgid ""
"The most important thing to understand is the different trade-offs between "
"the RDB and AOF persistence. Let's start with RDB:"
msgstr ""

# 1fef25f7438c4f87b127301a915cc3a8
#: ../../source/topics/persistence.rst:30
msgid "RDB advantages"
msgstr ""

# e21c8c95f2f846859dfe47642b4127c5
#: ../../source/topics/persistence.rst:32
msgid ""
"RDB is a very compact single-file point-in-time representation of your Redis "
"data. RDB files are perfect for backups. For instance you may want to "
"archive your RDB files every hour for the latest 24 hours, and to save an "
"RDB snapshot every day for 30 days. This allows you to easily restore "
"different versions of the data set in case of disasters."
msgstr ""

# 543868aa575a4cd2a9aeb37754e5ebd9
#: ../../source/topics/persistence.rst:38
msgid ""
"RDB is very good for disaster recovery, being a single compact file can be "
"transfered to far data centers, or on Amazon S3 (possibly encrypted)."
msgstr ""

# b1552463d90d4aa88c3eefb300b9c039
#: ../../source/topics/persistence.rst:41
msgid ""
"RDB maximizes Redis performances since the only work the Redis parent "
"process needs to do in order to persist is forking a child that will do all "
"the rest. The parent instance will never perform disk I/O or alike."
msgstr ""

# 3ab9072718cb48e9aabb9b0ff066d529
#: ../../source/topics/persistence.rst:45
msgid "RDB allows faster restarts with big datasets compared to AOF."
msgstr ""

# edee304068014ca7b3493d768c3c5641
#: ../../source/topics/persistence.rst:48
msgid "RDB disadvantages"
msgstr ""

# d9262b795dd44184951726d578184051
#: ../../source/topics/persistence.rst:50
msgid ""
"RDB is NOT good if you need to minimize the chance of data loss in case "
"Redis stops working (for example after a power outage). You can configure "
"different *save points* where an RDB is produced (for instance after at "
"least five minutes and 100 writes against the data set, but you can have "
"multiple save points). However you'll usually create an RDB snapshot every "
"five minutes or more, so in case of Redis stopping working without a correct "
"shutdown for any reason you should be prepared to lose the latest minutes of "
"data."
msgstr ""

# d40c8d7a490642b1b0d1d785c96c3d68
#: ../../source/topics/persistence.rst:58
msgid ""
"RDB needs to fork() often in order to persist on disk using a child process. "
"Fork() can be time consuming if the dataset is big, and may result in Redis "
"to stop serving clients for some millisecond or even for one second if the "
"dataset is very big and the CPU performance not great. AOF also needs to "
"fork() but you can tune how often you want to rewrite your logs without any "
"trade-off on durability."
msgstr ""

# a06720c0f32141f9915757e5c13fdfe3
#: ../../source/topics/persistence.rst:66
msgid "AOF advantages"
msgstr ""

# 691b11b5b9a24c739bf55aa24cad3daa
#: ../../source/topics/persistence.rst:68
msgid ""
"Using AOF Redis is much more durable: you can have different fsync policies: "
"no fsync at all, fsync every second, fsync at every query. With the default "
"policy of fsync every second write performances are still great (fsync is "
"performed using a background thread and the main thread will try hard to "
"perform writes when no fsync is in progress.) but you can only lose one "
"second worth of writes."
msgstr ""

# c313c339ba7a4ca8b6bb35764d66eb8d
#: ../../source/topics/persistence.rst:74
msgid ""
"The AOF log is an append only log, so there are no seeks, nor corruption "
"problems if there is a power outage. Even if the log ends with an half-"
"written command for some reason (disk full or other reasons) the redis-check-"
"aof tool is able to fix it easily."
msgstr ""

# e71e86652b65407499125dcd3fc267e6
#: ../../source/topics/persistence.rst:78
msgid ""
"Redis is able to automatically rewrite the AOF in background when it gets "
"too big. The rewrite is completely safe as while Redis continues appending "
"to the old file, a completely new one is produced with the minimal set of "
"operations needed to create the current data set, and once this second file "
"is ready Redis switches the two and starts appending to the new one."
msgstr ""

# f327384630d7403dbf36e157f7edcc78
#: ../../source/topics/persistence.rst:84
msgid ""
"AOF contains a log of all the operations one after the other in an easy to "
"understand and parse format. You can even easily export an AOF file. For "
"instance even if you flushed everything for an error using a FLUSHALL "
"command, if no rewrite of the log was performed in the meantime you can "
"still save your data set just stopping the server, removing the latest "
"command, and restarting Redis again."
msgstr ""

# 1963bbfa52a34aaf89708b6e4ff8296c
#: ../../source/topics/persistence.rst:92
msgid "AOF disadvantages"
msgstr ""

# bb86ede88b3147c1bfec86da19a07a00
#: ../../source/topics/persistence.rst:94
msgid ""
"AOF files are usually bigger than the equivalent RDB files for the same "
"dataset."
msgstr ""

# 307303f90ad04f678680244af22facc9
#: ../../source/topics/persistence.rst:96
msgid ""
"AOF can be slower than RDB depending on the exact fsync policy. In general "
"with fsync set to *every second* performances are still very high, and with "
"fsync disabled it should be exactly as fast as RDB even under high load. "
"Still RDB is able to provide more guarantees about the maximum latency even "
"in the case of an huge write load."
msgstr ""

# dd49f9a149ca42b29c78e238a7822599
#: ../../source/topics/persistence.rst:101
msgid ""
"In the past we experienced rare bugs in specific commands (for instance "
"there was one involving blocking commands like BRPOPLPUSH) causing the AOF "
"produced to not reproduce exactly the same dataset on reloading. This bugs "
"are rare and we have tests in the test suite creating random complex "
"datasets automatically and reloading them to check everything is ok, but "
"this kind of bugs are almost impossible with RDB persistence. To make this "
"point more clear: the Redis AOF works incrementally updating an existing "
"state, like MySQL or MongoDB does, while the RDB snapshotting creates "
"everything from scratch again and again, that is conceptually more robust. "
"However -"
msgstr ""

# 88bf9adcaaa045939a32efe7a56bfe0c
#: ../../source/topics/persistence.rst:112
msgid ""
"It should be noted that every time the AOF is rewritten by Redis it is "
"recreated from scratch starting from the actual data contained in the data "
"set, making resistance to bugs stronger compared to an always appending AOF "
"file (or one rewritten reading the old AOF instead of reading the data in "
"memory)."
msgstr ""

# 61121ef9a91145f193e84ea0c3661fb0
#: ../../source/topics/persistence.rst:117
msgid ""
"We never had a single report from users about an AOF corruption that was "
"detected in the real world."
msgstr ""

# cf1281fb0a57456297395a6e872bf26d
#: ../../source/topics/persistence.rst:121
msgid "Ok, so what should I use?"
msgstr ""

# df168d2dc7444d61b1a5ba4009dcbbb2
#: ../../source/topics/persistence.rst:123
msgid ""
"The general indication is that you should use both persistence methods if "
"you want a degree of data safety comparable to what PostgreSQL can provide "
"you."
msgstr ""

# bc6cac869c5848fda2ce373ace40b52c
#: ../../source/topics/persistence.rst:127
msgid ""
"If you care a lot about your data, but still can live with a few minutes of "
"data lose in case of disasters, you can simply use RDB alone."
msgstr ""

# 3579829db2974a9084d1a161ed086c47
#: ../../source/topics/persistence.rst:130
msgid ""
"There are many users using AOF alone, but we discourage it since to have an "
"RDB snapshot from time to time is a great idea for doing database backups, "
"for faster restarts, and in the event of bugs in the AOF engine."
msgstr ""

# a1086258c583422aa224ebe4aa5a8571
#: ../../source/topics/persistence.rst:135
msgid ""
"Note: for all these reasons we'll likely end up unifying AOF and RDB into a "
"single persistence model in the future (long term plan)."
msgstr ""

# 1ed128f5073a4a62a32e31220f6d907f
#: ../../source/topics/persistence.rst:138
msgid ""
"The following sections will illustrate a few more details about the two "
"persistence models."
msgstr ""

# 7117b028e3514adcb97a53ca7d104942
#: ../../source/topics/persistence.rst:141
msgid "Snapshotting ---"
msgstr "スナップショット"

# 01fcf656293f4cb289fbdfd6f81c948f
#: ../../source/topics/persistence.rst:143
msgid ""
"By default Redis saves snapshots of the dataset on disk, in a binary file "
"called ``dump.rdb``. You can configure Redis to have it save the dataset "
"every N seconds if there are at least M changes in the dataset, or you can "
"manually call the ``SAVE`` or ``BGSAVE`` commands."
msgstr ""

# 2bef317b02664ec7937f2dde6d6785fd
#: ../../source/topics/persistence.rst:148
msgid ""
"For example, this configuration will make Redis automatically dump the "
"dataset to disk every 60 seconds if at least 1000 keys changed:"
msgstr ""

# 86d03f18bb8f48edaf3cc6c7c8f87273
#: ../../source/topics/persistence.rst:155
msgid "This strategy is known as *snapshotting*."
msgstr ""

# ce56a7b90fcd4ea0b961cfd7d90fc870
# 550d390721614913af48216a9c59a28e
#: ../../source/topics/persistence.rst:158
#: ../../source/topics/persistence.rst:253
msgid "How it works"
msgstr ""

# 1ab7822f0d804942a6ce92e867dd55d1
#: ../../source/topics/persistence.rst:160
msgid "Whenever Redis needs to dump the dataset to disk, this is what happens:"
msgstr ""

# afed314c0d04483f811b49d9177e5741
#: ../../source/topics/persistence.rst:162
msgid ""
"Redis `forks <http://linux.die.net/man/2/fork>`__. We now have a child and a "
"parent process."
msgstr ""

# a0c339e403a14ce4bfeb1c272d33b30b
#: ../../source/topics/persistence.rst:165
msgid "The child starts to write the dataset to a temporary RDB file."
msgstr ""

# e983fd9ec92f41c385390809754df64a
#: ../../source/topics/persistence.rst:167
msgid ""
"When the child is done writing the new RDB file, it replaces the old one."
msgstr ""

# 797f0b551cdc423f83abea93987d3ce3
#: ../../source/topics/persistence.rst:170
msgid "This method allows Redis to benefit from copy-on-write semantics."
msgstr ""

# d12df0cd94af4be8b01d088dd93dce99
#: ../../source/topics/persistence.rst:172
msgid "Append-only file ---"
msgstr "追記専用ファイル"

# c7aeaecd8bbc40d9ad094e3e886f086c
#: ../../source/topics/persistence.rst:174
msgid ""
"Snapshotting is not very durable. If your computer running Redis stops, your "
"power line fails, or you accidentally ``kill -9`` your instance, the latest "
"data written on Redis will get lost. While this may not be a big deal for "
"some applications, there are use cases for full durability, and in these "
"cases Redis was not a viable option."
msgstr ""

# e25b6af2741543c18abbc4366e53bf68
#: ../../source/topics/persistence.rst:180
msgid ""
"The *append-only file* is an alternative, fully-durable strategy for Redis. "
"It became available in version 1.1."
msgstr ""

# 6e6bfdb763d94697ab84421ff14483df
#: ../../source/topics/persistence.rst:183
msgid "You can turn on the AOF in your configuration file:"
msgstr ""

# 5911fc519b9e4f14bc4b8b92fd82648d
#: ../../source/topics/persistence.rst:189
msgid ""
"From now on, every time Redis receives a command that changes the dataset (e."
"g. ``SET``) it will append it to the AOF. When you restart Redis it will re-"
"play the AOF to rebuild the state."
msgstr ""

# a8ac226d55ab49ad85f8a2676333a273
#: ../../source/topics/persistence.rst:194
msgid "Log rewriting"
msgstr ""

# d746bccd534e469a81826e2a1d1abe62
#: ../../source/topics/persistence.rst:196
msgid ""
"As you can guess, the AOF gets bigger and bigger as write operations are "
"performed. For example, if you are incrementing a counter 100 times, you'll "
"end up with a single key in your dataset containing the final value, but 100 "
"entries in your AOF. 99 of those entries are not needed to rebuild the "
"current state."
msgstr ""

# d94ff916509e40ae8c13d4f8894db268
#: ../../source/topics/persistence.rst:202
msgid ""
"So Redis supports an interesting feature: it is able to rebuild the AOF in "
"the background without interrupting service to clients. Whenever you issue a "
"``BGREWRITEAOF`` Redis will write the shortest sequence of commands needed "
"to rebuild the current dataset in memory. If you're using the AOF with Redis "
"2.2 you'll need to run ``BGREWRITEAOF`` from time to time. Redis 2.4 is able "
"to trigger log rewriting automatically (see the 2.4 example configuration "
"file for more information)."
msgstr ""

# 0567a057770e43fc990e5c50cc15c96c
#: ../../source/topics/persistence.rst:211
msgid "How durable is the append only file?"
msgstr ""

# 17f63d29c6ec442e8dbad5687528f9ff
#: ../../source/topics/persistence.rst:213
msgid ""
"You can configure how many times Redis will ```fsync`` <http://linux.die.net/"
"man/2/fsync>`__ data on disk. There are three options:"
msgstr ""

# ea28a5a5d71744b5a0c49718c79fc234
#: ../../source/topics/persistence.rst:217
msgid ""
"``fsync`` every time a new command is appended to the AOF. Very very slow, "
"very safe."
msgstr ""

# 8730f2aafc5b4578b495af661207032b
#: ../../source/topics/persistence.rst:220
msgid ""
"``fsync`` every second. Fast enough (in 2.4 likely to be as fast as "
"snapshotting), and you can lose 1 second of data if there is a disaster."
msgstr ""

# f92a68bb8770445ba68ee6bf12b21598
#: ../../source/topics/persistence.rst:224
msgid ""
"Never ``fsync``, just put your data in the hands of the Operating System. "
"The faster and less safe method."
msgstr ""

# 2451e9e58f814a8e9c9b9b447612a240
#: ../../source/topics/persistence.rst:227
msgid ""
"The suggested (and default) policy is to ``fsync`` every second. It is both "
"very fast and pretty safe. The ``always`` policy is very slow in practice "
"(although it was improved in Redis 2.0) – there is no way to make ``fsync`` "
"faster than it is."
msgstr ""

# 2fe6f96f6c2540ac95cc7373440a29bc
#: ../../source/topics/persistence.rst:233
msgid "What should I do if my AOF gets corrupted?"
msgstr ""

# b3d01ddce56e4c488a8639ae32ce8ab7
#: ../../source/topics/persistence.rst:235
msgid ""
"It is possible that the server crashes while writing the AOF file (this "
"still should never lead to inconsistencies), corrupting the file in a way "
"that is no longer loadable by Redis. When this happens you can fix this "
"problem using the following procedure:"
msgstr ""

# 82c0c48c6892471f823856c611239a26
#: ../../source/topics/persistence.rst:240
msgid "Make a backup copy of your AOF file."
msgstr ""

# 4104a7a3b0994d728ec7329018742593
#: ../../source/topics/persistence.rst:242
msgid ""
"Fix the original file using the ``redis-check-aof`` tool that ships with "
"Redis:"
msgstr ""

# 903b03d6618648bb9ee09c9a722ba9fb
#: ../../source/topics/persistence.rst:245
msgid "$ redis-check-aof --fix"
msgstr ""

# 190df046985f40d7859af669d6056aac
#: ../../source/topics/persistence.rst:247
msgid ""
"Optionally use ``diff -u`` to check what is the difference between two files."
msgstr ""

# 7fae99859705415294c1ab76a2730029
#: ../../source/topics/persistence.rst:250
msgid "Restart the server with the fixed file."
msgstr ""

# 2f59eab911d84d25b87913fed8f9abf8
#: ../../source/topics/persistence.rst:255
msgid ""
"Log rewriting uses the same copy-on-write trick already in use for "
"snapshotting. This is how it works:"
msgstr ""

# 8b73b431343b4c63b618abb7d1aae367
#: ../../source/topics/persistence.rst:258
msgid ""
"Redis `forks <http://linux.die.net/man/2/fork>`__, so now we have a child "
"and a parent process."
msgstr ""

# 87e95d86b20249f5b6d670263e19da74
#: ../../source/topics/persistence.rst:261
msgid "The child starts writing the new AOF in a temporary file."
msgstr ""

# 464394a42f034027873322bce051bea9
#: ../../source/topics/persistence.rst:263
msgid ""
"The parent accumulates all the new changes in an in-memory buffer (but at "
"the same time it writes the new changes in the old append-only file, so if "
"the rewriting fails, we are safe)."
msgstr ""

# b8d8cf0e908a4f4996d109c30fccd9d7
#: ../../source/topics/persistence.rst:267
msgid ""
"When the child is done rewriting the file, the parent gets a signal, and "
"appends the in-memory buffer at the end of the file generated by the child."
msgstr ""

# 000064e57e8d44edb1c960e388b6e895
#: ../../source/topics/persistence.rst:271
msgid ""
"Profit! Now Redis atomically renames the old file into the new one, and "
"starts appending new data into the new file."
msgstr ""

# bd06fa5591604248ad05de13dbc0ebc3
#: ../../source/topics/persistence.rst:275
msgid "How I can switch to AOF, if I'm currently using dump.rdb snapshots?"
msgstr ""

# ed82da067b7549a8bd5b9e00b2c77840
#: ../../source/topics/persistence.rst:277
msgid ""
"There is a different procedure to do this in Redis 2.0 and Redis 2.2, as you "
"can guess it's simpler in Redis 2.2 and does not require a restart at all."
msgstr ""

# 43f5404bd44240148e018a18a6c05a90
#: ../../source/topics/persistence.rst:281
msgid "**Redis >= 2.2**"
msgstr ""

# f16a202661a54cdbba4221de28392bd4
# 5a116a6e3610429f91aef92426287538
#: ../../source/topics/persistence.rst:283
#: ../../source/topics/persistence.rst:306
msgid "Make a backup of your latest dump.rdb file."
msgstr ""

# 4e284f30698f47b8ab6ee5cd3b9b6620
# 23fea90963b442e3ae43952d76e047a6
#: ../../source/topics/persistence.rst:284
#: ../../source/topics/persistence.rst:307
msgid "Transfer this backup into a safe place."
msgstr ""

# 647bd631ad384971a20f0f240d1a4611
#: ../../source/topics/persistence.rst:285
msgid "Issue the following two commands:"
msgstr ""

# 16daebb14a91416ba55e4c165866ad2f
#: ../../source/topics/persistence.rst:286
msgid "redis-cli config set appendonly yes"
msgstr ""

# 15ad6ba944f54fd1b3e83d1ddd355e9e
#: ../../source/topics/persistence.rst:287
msgid "redis-cli config set save \"\""
msgstr ""

# 41cc2646548d421cb43a673369fe57c1
# c6708c6c578e4f45af1602e7a445c8e9
#: ../../source/topics/persistence.rst:288
#: ../../source/topics/persistence.rst:314
msgid ""
"Make sure that your database contains the same number of keys it contained."
msgstr ""

# 15db69ad20324c248ca1106ea0ea8673
# c448b8122ad64d34a5d9570047497f2e
#: ../../source/topics/persistence.rst:290
#: ../../source/topics/persistence.rst:316
msgid "Make sure that writes are appended to the append only file correctly."
msgstr ""

# cd09bf7b372e4af19128e63207786a93
#: ../../source/topics/persistence.rst:292
msgid ""
"The first CONFIG command enables the Append Only File. In order to do so "
"**Redis will block** to generate the initial dump, then will open the file "
"for writing, and will start appending all the next write queries."
msgstr ""

# c911d2f4ce6b429dbcb64e1d8c870296
#: ../../source/topics/persistence.rst:296
msgid ""
"The second CONFIG command is used to turn off snapshotting persistence. This "
"is optional, if you wish you can take both the persistence methods enabled."
msgstr ""

# 69756ec62f434b0798a1cdc842215ffc
#: ../../source/topics/persistence.rst:300
msgid ""
"**IMPORTANT:** remember to edit your redis.conf to turn on the AOF, "
"otherwise when you restart the server the configuration changes will be lost "
"and the server will start again with the old configuration."
msgstr ""

# 07296c2c9da84ad28cd97d6b670147e1
#: ../../source/topics/persistence.rst:304
msgid "**Redis 2.0**"
msgstr ""

# 835e2a0097d2416087ade8d78f9d3b1e
#: ../../source/topics/persistence.rst:308
msgid "Stop all the writes against the database!"
msgstr ""

# 513691eafc324193aa6a66b558c9f5fd
#: ../../source/topics/persistence.rst:309
msgid "Issue a redis-cli bgrewriteaof. This will create the append only file."
msgstr ""

# fefdf1cc1d8a49d6a5d5b2131be1d325
#: ../../source/topics/persistence.rst:311
msgid "Stop the server when Redis finished generating the AOF dump."
msgstr ""

# 194aedec6a72439aa24a6b65f764b587
#: ../../source/topics/persistence.rst:312
msgid "Edit redis.conf end enable append only file persistence."
msgstr ""

# 9838f442ec77411e98c9d8fe149531eb
#: ../../source/topics/persistence.rst:313
msgid "Restart the server."
msgstr ""

# 9490a665c7194f14a7b3621dc82fb1de
#: ../../source/topics/persistence.rst:319
msgid "Interactions between AOF and RDB persistence"
msgstr ""

# ab7cb3f80710453185dcf9cb250de53d
#: ../../source/topics/persistence.rst:321
msgid ""
"Redis >= 2.4 makes sure to avoid triggering an AOF rewrite when an RDB "
"snapshotting operation is already in progress, or allowing a BGSAVE while "
"the AOF rewrite is in progress. This prevents two Redis background processes "
"from doing heavy disk I/O at the same time."
msgstr ""

# 8b5007ecc15646cdb538ba6756f1049d
#: ../../source/topics/persistence.rst:326
msgid ""
"When snapshotting is in progress and the user explicitly requests a log "
"rewrite operation using BGREWRITEAOF the server will reply with an OK status "
"code telling the user the operation is scheduled, and the rewrite will start "
"once the snapshotting is completed."
msgstr ""

# 515b957d08fa4870b4980cbf7b49a81d
#: ../../source/topics/persistence.rst:331
msgid ""
"In the case both AOF and RDB persistence are enabled and Redis restarts the "
"AOF file will be used to reconstruct the original dataset since it is "
"guaranteed to be the most complete."
msgstr ""

# 0fb96bb0237f4582adba6476a5516aa2
#: ../../source/topics/persistence.rst:336
msgid "Backing up Redis data"
msgstr ""

# f9371cb62f054543b529056aae4db56a
#: ../../source/topics/persistence.rst:338
msgid ""
"Before starting this section, make sure to read the following sentence: "
"**Make Sure to Backup Your Database**. Disks break, instances in the cloud "
"disappear, and so forth: no backups means huge risk of data disappearing "
"into /dev/null."
msgstr ""

# a10ae9561eb247aaa1adad423644568e
#: ../../source/topics/persistence.rst:343
msgid ""
"Redis is very data backup friendly since you can copy RDB files while the "
"database is running: the RDB is never modified once produced, and while it "
"gets produced it uses a temporary name and is renamed into its final "
"destination atomically using rename(2) only when the new snapshot is "
"complete."
msgstr ""

# 0685381c72c649c6956c6d21c19a72ed
#: ../../source/topics/persistence.rst:349
msgid ""
"This means that copying the RDB file is completely safe while the server is "
"running. This is what we suggest:"
msgstr ""

# d301b21c1ad34f539351690a3d6374e6
#: ../../source/topics/persistence.rst:352
msgid ""
"Create a cron job in your server creating hourly snapshots of the RDB file "
"in one directory, and daily snapshots in a different directory."
msgstr ""

# da4aaaa4ff9d4b4aa7b5c737d5121e03
#: ../../source/topics/persistence.rst:354
msgid ""
"Every time the cron script runs, make sure to call the ``find`` command to "
"make sure too old snapshots are deleted: for instance you can take hourly "
"snapshots for the latest 48 hours, and daily snapshots for one or two "
"months. Make sure to name the snapshots with data and time information."
msgstr ""

# 15450892777b490880585a5302eb8e6b
#: ../../source/topics/persistence.rst:359
msgid ""
"At least one time every day make sure to transfer an RDB snapshot *outside "
"your data center* or at least *outside the physical machine* running your "
"Redis instance."
msgstr ""

# c19d957a56a34c2a92d00d0f11773f71
#: ../../source/topics/persistence.rst:364
msgid "Disaster recovery"
msgstr ""

# 912adc264d23427ea2af7e347fa4d679
#: ../../source/topics/persistence.rst:366
msgid ""
"Disaster recovery in the context of Redis is basically the same story as "
"backups, plus the ability to transfer those backups in many different "
"external data centers. This way data is secured even in the case of some "
"catastrophic event affecting the main data center where Redis is running and "
"producing its snapshots."
msgstr ""

# 0bf6cfff477b4e2daf38015ea26de1c2
#: ../../source/topics/persistence.rst:372
msgid ""
"Since many Redis users are in the startup scene and thus don't have plenty "
"of money to spend we'll review the most interesting disaster recovery "
"techniques that don't have too high costs."
msgstr ""

# ecec9cf750484a159970ab619791c64c
#: ../../source/topics/persistence.rst:376
msgid ""
"Amazon S3 and other similar services are a good way for mounting your "
"disaster recovery system. Simply transfer your daily or hourly RDB snapshot "
"to S3 in an encrypted form. You can encrypt your data using ``gpg -c`` (in "
"symmetric encryption mode). Make sure to store your password in many "
"different safe places (for instance give a copy to the most important guys "
"of your organization). It is recommanded to use multiple storage services "
"for improved data safety."
msgstr ""

# 40dfb2da3bc94c03b1f4b367684d55d3
#: ../../source/topics/persistence.rst:383
msgid ""
"Transfer your snapshots using SCP (part of SSH) to far servers. This is a "
"fairly simple and safe route: get a small VPS in a place that is very far "
"from you, install ssh there, and greate an ssh client key without "
"passphrase, then make add it in the authorized\\_keys file of your small "
"VPS. You are ready to transfer backups in an automated fashion. Get at least "
"two VPS in two different providers for best results."
msgstr ""

# f482fe01f008427f9fe6bcce6419a325
#: ../../source/topics/persistence.rst:391
msgid ""
"It is important to understand that this systems can easily fail if not coded "
"in the right way. At least make absolutely sure that after the transfer is "
"completed you are able to verify the file size (that should match the one of "
"the file you copied) and possibly the SHA1 digest if you are using a VPS."
msgstr ""

# c312d71b67f8402d8827842b84904362
#: ../../source/topics/persistence.rst:397
msgid ""
"You also need some kind of independent alert system if the transfer of fresh "
"backups is not working for some reason."
msgstr ""
