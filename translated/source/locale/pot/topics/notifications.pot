# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/notifications.rst:2
# cc873d322cc74e78aec0c3999da4cb82
msgid "Redis Keyspace Notifications"
msgstr ""

#: ../../source/topics/notifications.rst:4
# 2503e090d6554704b645c0687f3d6de7
msgid "**IMPORTANT** Keyspace notifications is a feature available since 2.8.0"
msgstr ""

#: ../../source/topics/notifications.rst:7
# fda7e8a17ba843189a2d0223d647a128
msgid "Feature overview"
msgstr ""

#: ../../source/topics/notifications.rst:9
# 03b87979613040eda13380d870fdf3da
msgid "Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way."
msgstr ""

#: ../../source/topics/notifications.rst:12
# 9b080d3e584d4d61a391d700b64b86af
msgid "Examples of the events that is possible to receive are the following:"
msgstr ""

#: ../../source/topics/notifications.rst:14
# 677f339a760040b58361ada204ce1704
msgid "All the commands affecting a given key."
msgstr ""

#: ../../source/topics/notifications.rst:15
# a50cc68bac404671aa784b1c0763c686
msgid "All the keys receiving an LPUSH operation."
msgstr ""

#: ../../source/topics/notifications.rst:16
# be65eb7e7b97479581a8fee9f6896e4b
msgid "All the keys expiring in the database 0."
msgstr ""

#: ../../source/topics/notifications.rst:18
# ad08cc472f4a46d4b05dcb143f60c634
msgid "Events are delivered using the normal Pub/Sub layer of Redis, so clients implementing Pub/Sub are able to use this feature without modifications."
msgstr ""

#: ../../source/topics/notifications.rst:21
# 18c9cd18dc99442486c40d9806eeb08f
msgid "Because Redis Pub/Sub is *fire and forget* currently there is no way to use this feature if you application demands **reliable notification** of events, that is, if your Pub/Sub client disconnects, and reconnects later, all the events delivered during the time the client was disconnected are lost."
msgstr ""

#: ../../source/topics/notifications.rst:27
# bfcb0e7e4c3a41578d695f9e9c6e051c
msgid "In the future there are plans to allow for more reliable delivering of events, but probably this will be addressed at a more general level either bringing reliability to Pub/Sub itself, or allowing Lua scripts to intercept Pub/Sub messages to perform operations like pushing the events into a list."
msgstr ""

#: ../../source/topics/notifications.rst:34
# 978ac61301ef4cd4b148eda7c6df1f7f
msgid "Type of events"
msgstr ""

#: ../../source/topics/notifications.rst:36
# 151e26d8c05f4fb9a138339208e366e2
msgid "Keyspace notifications are implemented sending two distinct type of events for every operation affecting the Redis data space. For instance a ``DEL`` operation targeting the key named ``mykey`` in database ``0`` will trigger the delivering of two messages, exactly equivalent to the following two ``PUBLISH`` commands:"
msgstr ""

#: ../../source/topics/notifications.rst:47
# 19e184d3f60b48999a35c1823a7afd70
msgid "It is easy to see how one channel allows to listen to all the events targeting the key ``mykey`` and the other channel allows to obtain informations about all the keys that are target of a ``del`` operation."
msgstr ""

#: ../../source/topics/notifications.rst:51
# eb8c925cb8e042f48fbf36f85865ac38
msgid "The first kind of event, with ``keyspace`` prefix in the channel is called a **Key-space notification**, while the second, with the ``keyevent`` prefix, is called a **Key-event notification**."
msgstr ""

#: ../../source/topics/notifications.rst:55
# 7dc6724b99ea40ab810b97be3720a043
msgid "In the above example a ``del`` event was generated for the key ``mykey``. What happens is that:"
msgstr ""

#: ../../source/topics/notifications.rst:58
# 530ad87fa9d34920aef2aa234397d16d
msgid "The Key-space channel receives as message the name of the event."
msgstr ""

#: ../../source/topics/notifications.rst:59
# 555deed8383443198648ebda8ad289d0
msgid "The Key-event channel receives as message the name of the key."
msgstr ""

#: ../../source/topics/notifications.rst:61
# 88fea76e393346d1bc42546422e7fba5
msgid "It is possible to enable only one kind of notification in order to deliver just the subset of events we are interested in."
msgstr ""

#: ../../source/topics/notifications.rst:65
# 038c9a47dbbf47a783c20e24df8f1f2f
msgid "Configuration"
msgstr ""

#: ../../source/topics/notifications.rst:67
# cc91d10fdeda45e997f74b08e8d55707
msgid "By default keyspace events notifications are disabled because while not very sensible the feature uses some CPU power. Notifications are enabled using the ``notify-keyspace-events`` of redis.conf or via the **CONFIG SET**."
msgstr ""

#: ../../source/topics/notifications.rst:72
# 4b249fa9e74e476897c93deab3cd8d0d
msgid "Setting the parameter to the empty string disables notifications. In order to enable the feature a non-empty string is used, composed of multiple characters, where every character has a special meaning according to the following table:"
msgstr ""

#: ../../source/topics/notifications.rst:91
# c3a31711fc934e7db662f2cd07e224f3
msgid "At least ``K`` or ``E`` should be present in the string, otherwise no event will be delivered regardless of the rest of the string."
msgstr ""

#: ../../source/topics/notifications.rst:94
# 2352ecc4d8f1485db9bc57c2026d4086
msgid "For instance to enable just Key-space events for lists, the configuration parameter must be set to ``Kl``, and so forth."
msgstr ""

#: ../../source/topics/notifications.rst:97
# a5e9f7529dbb4c1d8510ec5500c1ab01
msgid "The string ``KEA`` can be used to enable every possible event."
msgstr ""

#: ../../source/topics/notifications.rst:100
# 749620c7c7074cdaa48134c711650475
msgid "Events generated by different commands"
msgstr ""

#: ../../source/topics/notifications.rst:102
# 44eae6f0363c4965a623d0b90037a465
msgid "Different commands generate different kind of events according to the following list."
msgstr ""

#: ../../source/topics/notifications.rst:105
# 881b5c2a1c324a26ab95f47bb30883a7
msgid "``DEL`` generates a ``del`` event for every deleted key."
msgstr ""

#: ../../source/topics/notifications.rst:106
# fb71e6d916794d6ebe31b38bd747679e
msgid "``RENAME`` generates two events, a ``rename_from`` event for the source key, and a ``rename_to`` event for the destination key."
msgstr ""

#: ../../source/topics/notifications.rst:108
# d24da4e244d043a592b4054ff6e58e9f
msgid "``EXPIRE`` generates an ``expire`` event when an expire is set to the key, or a ``del`` event every time setting an expire results into the key being deleted (see ``EXPIRE`` documentation for more info)."
msgstr ""

#: ../../source/topics/notifications.rst:111
# 8a5faf806b35424db9393c477e35cba9
msgid "``SORT`` generates a ``sortstore`` event when ``STORE`` is used to set a new key. If the resulting list is empty, and the ``STORE`` option is used, and there was already an existing key with that name, the result is that the key is deleted, so a ``del`` event is generated in this condition."
msgstr ""

#: ../../source/topics/notifications.rst:116
# fcda70144e4148e8bad36778a1f0792a
msgid "``SET`` and all its variants (``SETEX``, ``SETNX``,\\ ``GETSET``) generate ``set`` events. However ``SETEX`` will also generate an ``expire`` events."
msgstr ""

#: ../../source/topics/notifications.rst:119
# ad7bd3b2b2dc4df393ca1ab0ad74c7dc
msgid "``MSET`` generates a separated ``set`` event for every key."
msgstr ""

#: ../../source/topics/notifications.rst:120
# 56a16bd413b44edb9b0e74998d587522
msgid "``SETRANGE`` generates a ``setrange`` event."
msgstr ""

#: ../../source/topics/notifications.rst:121
# 1ccb357d68e54af3b448de215e5bbad0
msgid "``INCR``, ``DECR``, ``INCRBY``, ``DECRBY`` commands all generate ``incrby`` events."
msgstr ""

#: ../../source/topics/notifications.rst:123
# 889b16c06b1f4fea82d24186366d2619
msgid "``INCRBYFLOAT`` generates an ``incrbyfloat`` events."
msgstr ""

#: ../../source/topics/notifications.rst:124
# 584eadf7e0d24843aa9c24823dcdf1dc
msgid "``APPEND`` generates an ``append`` event."
msgstr ""

#: ../../source/topics/notifications.rst:125
# abef52b0d3154ebda3ce9531e9ed0f15
msgid "``LPUSH`` and ``LPUSHX`` generates a single ``lpush`` event, even in the variadic case."
msgstr ""

#: ../../source/topics/notifications.rst:127
# a548458a64284c05af6b6eaa49b4215e
msgid "``RPUSH`` and ``RPUSHX`` generates a single ``rpush`` event, even in the variadic case."
msgstr ""

#: ../../source/topics/notifications.rst:129
# e2a0f78d709a4efba06a66ae310b92cb
msgid "``RPOP`` generates an ``rpop`` event. Additionally a ``del`` event is generated if the key is removed because the last element from the list was popped."
msgstr ""

#: ../../source/topics/notifications.rst:132
# f8e2c387ac774870b586e325d0c56209
msgid "``LPOP`` generates an ``lpop`` event. Additionally a ``del`` event is generated if the key is removed because the last element from the list was popped."
msgstr ""

#: ../../source/topics/notifications.rst:135
# 6c87d8a165e54921b25af3970b5ff422
msgid "``LINSERT`` generates an ``linsert`` event."
msgstr ""

#: ../../source/topics/notifications.rst:136
# d6824f97407a4f93a40235d0f44f4271
msgid "``LSET`` generates an ``lset`` event."
msgstr ""

#: ../../source/topics/notifications.rst:137
# a9517f08c1c74ae987f385f45881a32b
msgid "``LTRIM`` generates an ``ltrim`` event, and additionally a ``del`` event if the resulting list is empty and the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:139
# a183f0b16d524ae4808345a364edf372
msgid "``RPOPLPUSH`` and ``BRPOPLPUSH`` generate an ``rpop`` event and an ``lpush`` event. In both cases the order is guaranteed (the ``lpush`` event will always be delivered after the ``rpop`` event). Additionally a ``del`` event will be generated if the resulting list is zero length and the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:144
# 6f7c247aeeb2444094f6ad457c346f44
msgid "``HSET``, ``HSETNX`` and ``HMSET`` all generate a single ``hset`` event."
msgstr ""

#: ../../source/topics/notifications.rst:146
# 6743a10e45164510b7b17dde25bfd2fc
msgid "``HINCRBY`` generates an ``hincrby`` event."
msgstr ""

#: ../../source/topics/notifications.rst:147
# 38d7ac154c004a368de551fbab35358f
msgid "``HINCRBYFLOAT`` generates an ``hincrbyfloat`` event."
msgstr ""

#: ../../source/topics/notifications.rst:148
# 92c9f97192de4072ba7c9d08388c3171
msgid "``HDEL`` generates a single ``hdel`` event, and an additional ``del`` event if the resulting hash is empty and the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:150
# 79e9f98f85db467897fe2148e8a4216c
msgid "``SADD`` generates a single ``sadd`` event, even in the variadic case."
msgstr ""

#: ../../source/topics/notifications.rst:152
# 2c3a017856db47ce8aa727633dada688
msgid "``SREM`` generates a single ``srem`` event, and an additional ``del`` event if the resulting set is empty and the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:154
# 0334d0869a9f42e7ad6c2d92303d5b27
msgid "``SMOVE`` generates an ``srem`` event for the source key, and an ``sadd`` event for the destination key."
msgstr ""

#: ../../source/topics/notifications.rst:156
# e52198419af44c359a42759fa0783539
msgid "``SPOP`` generates an ``spop`` event, and an additional ``del`` event if the resulting set is empty and the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:158
# 8c6144d2bb1d4b6eb29ecbbc04cf498b
msgid "``SINTERSTORE``, ``SUNIONSTORE``, ``SDIFFSTORE`` generate ``sinterstore``, ``sunionostore``, ``sdiffstore`` events respectively. In the speical case the resulting set is empty, and the key where the result is stored already exists, a ``del`` event is generated since the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:163
# 73299dbfc6e0446c959f1c151bff7da5
msgid "``ZINCR`` generates a ``zincr`` event."
msgstr ""

#: ../../source/topics/notifications.rst:164
# fc359ce8afe9418d9c786a38de55a56d
msgid "``ZADD`` generates a single ``zadd`` event even when multiple elements are added."
msgstr ""

#: ../../source/topics/notifications.rst:166
# 8146f13ab01440a5b84106d380094cae
msgid "``ZREM`` generates a single ``zrem`` event even when multiple elements are deleted. When the resulting sorted set is empty and the key is generated, an additional ``del`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:169
# 82bd27e270f24ed09d8288c25c505613
msgid "``ZREMBYSCORE`` generates a single ``zrembyscore`` event. When the resulting sorted set is empty and the key is generated, an additional ``del`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:172
# 1123e92c1b49439bb95d6bcad5fc04ab
msgid "``ZREMBYRANK`` generates a single ``zrembyrank`` event. When the resulting sorted set is empty and the key is generated, an additional ``del`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:175
# 9b5a5342c0164feab3d1a4d5ff2d172b
msgid "``ZINTERSTORE`` and ``ZUNIONSTORE`` respectively generate ``zinterstore`` and ``zunionstore`` events. In the speical case the resulting sorted set is empty, and the key where the result is stored already exists, a ``del`` event is generated since the key is removed."
msgstr ""

#: ../../source/topics/notifications.rst:180
# 7801a5588e334ea582bfd2e0af307500
msgid "Every time a key with a time to live associated is removed from the data set because it expired, an ``expired`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:182
# 080afa7051e94431914a44401ffdfecd
msgid "Every time a key is evicted from the data set in order to free memory as a result of the ``maxmemory`` policy, an ``evicted`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:186
# f44a010b81eb4ce48754eabb097939d9
msgid "**IMPORTANT** all the commands generate events only if the target key is really modified. For instance an ``SREM`` deleting a non-existing element from a Set will not actually change the value of the key, so no event will be generated."
msgstr ""

#: ../../source/topics/notifications.rst:191
# 2603fbe00a5247829a95ad424338d8cf
msgid "If in doubt about how events are generated for a given command, the simplest thing to do is to watch yourself:"
msgstr ""

#: ../../source/topics/notifications.rst:201
# 476e40ed643f40308c809a694e82083d
msgid "At this point use ``redis-cli`` in another terminal to send commands to the Redis server and watch the events generated:"
msgstr ""

#: ../../source/topics/notifications.rst:211
# e79d4b5730b94da5bfcb7fcc139509a7
msgid "Timing of expired events"
msgstr ""

#: ../../source/topics/notifications.rst:213
# 64122df82a894d18acac2b5dde535f39
msgid "Keys with a time to live associated are expired by Redis in two ways:"
msgstr ""

#: ../../source/topics/notifications.rst:215
# 736f4bbe3ae64b6eb126fe4e8a2a1c18
msgid "When the key is accessed by a command and is found to be expired."
msgstr ""

#: ../../source/topics/notifications.rst:216
# e13156fd0b4a4c44ab347ea57b8f3565
msgid "Via a background system that looks for expired keys in background, incrementally, in order to be able to also collect keys that are never accessed."
msgstr ""

#: ../../source/topics/notifications.rst:220
# 753e928023c043b1895392cfc7f6f763
msgid "The ``expired`` events are generated when a key is accessed and is found to be expired by one of the above systems, as a result there are no guarantees that the Redis server will be able to generate the ``expired`` event at the time the key time to live reaches the value of zero."
msgstr ""

#: ../../source/topics/notifications.rst:226
# 3255e0991bd04952885ed0ab6738c878
msgid "If no command targets the key constantly, and there are many keys with a TTL associated, there can be a significant delay between the time the key time to live drops to zero, and the time the ``expired`` event is generated."
msgstr ""

#: ../../source/topics/notifications.rst:231
# d163f7a669d841f9a886386884a8c77b
msgid "Basically ``expired`` events **are generated when the Redis server deletes the key** and not when the time to live theorically reaches the value of zero."
msgstr ""

