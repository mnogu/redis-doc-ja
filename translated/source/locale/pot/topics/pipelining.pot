# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/pipelining.rst:2
# a41bebebc11540638e52acf2b6483df8
msgid "Request/Response protocols and RTT"
msgstr ""

#: ../../source/topics/pipelining.rst:4
# a40e9406d4bd40c59a33a3838fd802c3
msgid "Redis is a TCP server using the client-server model and what is called a *Request/Response* protocol."
msgstr ""

#: ../../source/topics/pipelining.rst:7
# 175b49112f754a5e90d585d32b81aaad
msgid "This means that usually a request is accomplished with the following steps:"
msgstr ""

#: ../../source/topics/pipelining.rst:10
# be30b7fa02b24049ab39eb16a731d582
msgid "The client sends a query to the server, and reads from the socket, usually in a blocking way, for the server response."
msgstr ""

#: ../../source/topics/pipelining.rst:12
# 00b5beba4f10430893d4e378279f94ec
msgid "The server processes the command and sends the response back to the client."
msgstr ""

#: ../../source/topics/pipelining.rst:15
# 3a74c36a6769489c86fc90e850364041
msgid "So for instance a four commands sequence is something like this:"
msgstr ""

#: ../../source/topics/pipelining.rst:17
#: ../../source/topics/pipelining.rst:19
#: ../../source/topics/pipelining.rst:21
#: ../../source/topics/pipelining.rst:23
#: ../../source/topics/pipelining.rst:78
#: ../../source/topics/pipelining.rst:79
#: ../../source/topics/pipelining.rst:80
#: ../../source/topics/pipelining.rst:81
# c3a755a43b434e0cb290fbbffa0b66eb
# 933f9601eb914299b5b0046c8b53f5aa
# d4218299962d41c686b32e92a4ff8a00
# f72568b1eeab4906837e2535a56892df
# dcbb29ff62f34061bb064f411c780209
# 5941803730884f0b97f8c9fa6b4a98df
# 41c8bab12b624ae9a894f01e3d8615a0
# b8b7863a0c5b42dfaec29ea68c000530
msgid "*Client:* INCR X"
msgstr ""

#: ../../source/topics/pipelining.rst:18
#: ../../source/topics/pipelining.rst:82
# bab9f7be7bb64fe3b9d6be46018a7849
# 05aeecf540544f3fb180d329343a5092
msgid "*Server:* 1"
msgstr ""

#: ../../source/topics/pipelining.rst:20
#: ../../source/topics/pipelining.rst:83
# 79832d5440e449f2b72f3bd6cf7779f6
# be8eb4a500f74ac7aef389db18cf4f3d
msgid "*Server:* 2"
msgstr ""

#: ../../source/topics/pipelining.rst:22
#: ../../source/topics/pipelining.rst:84
# 0ee6ddff24764d68a82db6e19b53e14c
# 8e70be645786409fa0baa14b340ccedb
msgid "*Server:* 3"
msgstr ""

#: ../../source/topics/pipelining.rst:24
#: ../../source/topics/pipelining.rst:85
# 334c4097f394411c8735cac291d663e8
# bd2f069ea0f744ee9a008173902b90e9
msgid "*Server:* 4"
msgstr ""

#: ../../source/topics/pipelining.rst:26
# 814af786372e4beb9224ddd9d7648712
msgid "Clients and Servers are connected via a networking link. Such a link can be very fast (a loopback interface) or very slow (a connection established over the Internet with many hops between the two hosts). Whatever the network latency is, there is a time for the packets to travel from the client to the server, and back from the server to the client to carry the reply."
msgstr ""

#: ../../source/topics/pipelining.rst:33
# 58c6e66da0784ca68f0d52e6db875a7d
msgid "This time is called RTT (Round Trip Time). It is very easy to see how this can affect the performances when a client needs to perform many requests in a row (for instance adding many elements to the same list, or populating a database with many keys). For instance if the RTT time is 250 milliseconds (in the case of a very slow link over the Internet), even if the server is able to process 100k requests per second, we'll be able to process at max four requests per second."
msgstr ""

#: ../../source/topics/pipelining.rst:41
# b447ea6853de4e10a71e58183b63c9d3
msgid "If the interface used is a loopback interface, the RTT is much shorter (for instance my host reports 0,044 milliseconds pinging 127.0.0.1), but it is still a lot if you need to perform many writes in a row."
msgstr ""

#: ../../source/topics/pipelining.rst:45
# 2c01dba500874df2a522a94543122378
msgid "Fortunately there is a way to improve this use cases."
msgstr ""

#: ../../source/topics/pipelining.rst:48
# 930007890e8145d784bbc76f1a09b804
msgid "Redis Pipelining"
msgstr ""

#: ../../source/topics/pipelining.rst:50
# 5230335494a1450481c71e68887b5382
msgid "A Request/Response server can be implemented so that it is able to process new requests even if the client didn't already read the old responses. This way it is possible to send *multiple commands* to the server without waiting for the replies at all, and finally read the replies in a single step."
msgstr ""

#: ../../source/topics/pipelining.rst:56
# bc907a7208294a94bb1d24de04bcbb22
msgid "This is called pipelining, and is a technique widely in use since many decades. For instance many POP3 protocol implementations already supported this feature, dramatically speeding up the process of downloading new emails from the server."
msgstr ""

#: ../../source/topics/pipelining.rst:61
# 64af7750f48f4afa99cecd1a1021632a
msgid "Redis supports pipelining since the very early days, so whatever version you are running, you can use pipelining with Redis. This is an example using the raw netcat utility:"
msgstr ""

#: ../../source/topics/pipelining.rst:72
# 93e3897cdc23447a8f8e82359b7c43f2
msgid "This time we are not paying the cost of RTT for every call, but just one time for the three commands."
msgstr ""

#: ../../source/topics/pipelining.rst:75
# a95a41413587454f93bd6e390dfb9065
msgid "To be very explicit, with pipelining the order of operations of our very first example will be the following:"
msgstr ""

#: ../../source/topics/pipelining.rst:87
# a7afb908c72d42ecb33fa06709a80694
msgid "**IMPORTANT NOTE**: while the client sends commands using pipelining, the server will be forced to queue the replies, using memory. So if you need to send many many commands with pipelining it's better to send this commands up to a given reasonable number, for instance 10k commands, read the replies, and send again other 10k commands and so forth. The speed will be nearly the same, but the additional memory used will be at max the amount needed to queue the replies for this 10k commands."
msgstr ""

#: ../../source/topics/pipelining.rst:96
# 53ceeeea79004b29a9f549dc2b14d419
msgid "Some benchmark"
msgstr ""

#: ../../source/topics/pipelining.rst:98
# 5e95d2b614394362b8853b343af4e3fd
msgid "In the following benchmark we'll use the Redis Ruby client, supporting pipelining, to test the speed improvement due to pipelining:"
msgstr ""

#: ../../source/topics/pipelining.rst:135
# b7869dfec9a94b0680696b1ed8722d7b
msgid "Running the above simple script will provide this figures in my Mac OS X system, running over the loopback interface, where pipelining will provide the smallest improvement as the RTT is already pretty low:"
msgstr ""

#: ../../source/topics/pipelining.rst:144
# 977deedf04554e15b96da2cf7f096a2a
msgid "As you can see using pipelining we improved the transfer by a factor of five."
msgstr ""

#: ../../source/topics/pipelining.rst:148
# 6e1206490dae41838267c73c07ebe11f
msgid "Pipelining VS Scripting"
msgstr ""

#: ../../source/topics/pipelining.rst:150
# ec249720879c47dfbfc0045945f364fa
msgid "Using `Redis scripting </commands/eval>`__ (available in Redis version 2.6 or greater) a number of use cases for pipelining can be addressed more efficiently using scripts that perform a lot of the work needed server side. A big advantage of scripting is that it is able to both read and write data with minimal latency, making operations like *read, compute, write* very fast (pipelining can't help in this scenario since the client needs the reply of the read command before it can call the write command)."
msgstr ""

#: ../../source/topics/pipelining.rst:159
# b8c98a6a25054cea93b3a2314f1e646b
msgid "Sometimes the application may also want to send ``EVAL`` or ``EVALSHA`` commands in a pipeline. This is entirely possible and Redis explicitly supports it with the `SCRIPT LOAD <http://redis.io/commands/script-load>`__ command (it guarantees that ``EVALSHA`` can be called without the risk of failing)."
msgstr ""

