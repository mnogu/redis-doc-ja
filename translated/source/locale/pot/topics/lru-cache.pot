# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, moco_beta
# This file is distributed under the same license as the Redis Documentation (Japanese) package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Redis Documentation (Japanese) 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-31 23:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/topics/lru-cache.rst:2
# d1e9fddbcfa4415fb74cda669ce18b4e
msgid "Using Redis as an LRU cache"
msgstr ""

#: ../../source/topics/lru-cache.rst:4
# 45c5cd9a62dd4cf692a264e500728346
msgid "When Redis is used as a cache, sometimes it is handy to let it automatically evict old data as you add new one. This behavior is very well known in the community of developers, since it is the default behavior of the popular *memcached* system."
msgstr ""

#: ../../source/topics/lru-cache.rst:9
# 4011788f03ad402eac9bb68b5bff5de3
msgid "LRU is actually only one of the supported eviction methods. This page covers the more general topic of the Redis ``maxmemory`` directive that is used in order to limit the memory usage to a fixed amount, and it also covers in depth the LRU algorithm used by Redis, that is actually an approximation of the exact LRU."
msgstr ""

#: ../../source/topics/lru-cache.rst:16
# 2ec051ac9ec544998964162e4ce5471c
msgid "Maxmemory configuration directive"
msgstr ""

#: ../../source/topics/lru-cache.rst:18
# acb6dedc4da94dff96d350e53b0ba682
msgid "The ``maxmemory`` configuration directive is used in order to configure Redis to use a specified amount of memory for the data set. It is possible to set the configuration directive using the ``redis.conf`` file, or later using the ``CONFIG SET`` command at runtime."
msgstr ""

#: ../../source/topics/lru-cache.rst:23
# 8c4e30382d8e4c24b5e5a1d6d1f4d4b2
msgid "For example in order to configure a memory limit of 100 megabytes, the following directive can be used inside the ``redis.conf`` file."
msgstr ""

#: ../../source/topics/lru-cache.rst:30
# 8301904bb46e4258bfec14ca6e3ea616
msgid "Setting ``maxmemory`` to zero results into no memory limits. This is the default behavior for 64 bit systems, while 32 bit systems use an implicit memory limit of 3GB."
msgstr ""

#: ../../source/topics/lru-cache.rst:34
# 41a0b358fbe24ccd84d82ce764589083
msgid "When the specified amount of memory is reached, it is possible to select among different behaviors, called **policies**. Redis can just return errors for commands that could result in more memory being used, or it can evict some old data in order to return back to the specified limit every time new data is added."
msgstr ""

#: ../../source/topics/lru-cache.rst:41
# 4c0112c155f44679b6f9489549b275e1
msgid "Eviction policies"
msgstr ""

#: ../../source/topics/lru-cache.rst:43
# 57baeb346e534715a4ae92dfcfa4d88e
msgid "The exact behavior Redis follows when the ``maxmemory`` limit is reached is configured using the ``maxmemory-policy`` configuration directive."
msgstr ""

#: ../../source/topics/lru-cache.rst:46
# 0d5a367832794b0cae43ab6c1d298282
msgid "The following policies are available:"
msgstr ""

#: ../../source/topics/lru-cache.rst:48
# 93bf74a7fb8f4058a47cab8810f6e02c
msgid "**noeviction**: return errors when the memory limit was reached and the client is trying to execute commands that could result in more memory to be used (most write commands, but ``DEL`` and a few more exceptions)."
msgstr ""

#: ../../source/topics/lru-cache.rst:52
# 425d6fc491094e598a722415ea580144
msgid "**allkeys-lru**: evict keys trying to remove the less recently used (LRU) keys first, in order to make space for the new data added."
msgstr ""

#: ../../source/topics/lru-cache.rst:54
# b8da9f9b8c244cdc83ce4c02148c8391
msgid "**volatile-lru**: evict keys trying to remove the less recently used (LRU) keys first, but only among keys that have an **expire set**, in order to make space for the new data added."
msgstr ""

#: ../../source/topics/lru-cache.rst:57
# b98e9cd0655f4207a2773292b324612c
msgid "**allkeys-random**: evict random keys in order to make space for the new data added."
msgstr ""

#: ../../source/topics/lru-cache.rst:59
# 17efad8c1ca041659cc294fc9f0ad4bc
msgid "**volatile-random**: evict random keys in order to make space for the new data added, but only evict keys with an **expire set**."
msgstr ""

#: ../../source/topics/lru-cache.rst:61
# cec9060de7324268a8e6b1242706eea3
msgid "**volatile-ttl**: In order to make space for the new data, evict only keys with an **expire set**, and try to evict keys with a shorter time to live (TTL) first."
msgstr ""

#: ../../source/topics/lru-cache.rst:65
# b5e73f2a78ad4a88805654e69828a37f
msgid "The policies **volatile-lru**, **volatile-random** and **volatile-ttl** behave like **noeviction** if there are no keys to evict matching the prerequisites."
msgstr ""

#: ../../source/topics/lru-cache.rst:69
# 5767893a325c4771b7bea461f3d845c0
msgid "To pick the right eviction policy is important depending on the access pattern of your application, however you can reconfigure the policy at runtime while the application is running, and monitor the number of cache misses and hits using the Redis ``INFO`` output in order to tune your setup."
msgstr ""

#: ../../source/topics/lru-cache.rst:75
# 90a558be7db349308c846e699dd8abed
msgid "In general as a rule of thumb:"
msgstr ""

#: ../../source/topics/lru-cache.rst:77
# 616dba84759b4560acfd8534712ca498
msgid "Use the **allkeys-lru** policy when you expect a power-law distribution in the popularity of your requests, that is, you expect that a subset of elements will be accessed far more often than the rest. **This is a good pick if you are unsure**."
msgstr ""

#: ../../source/topics/lru-cache.rst:81
# 3e601e85e2f14094be9ca023734de680
msgid "Use the **allkeys-random** if you have a cyclic access where all the keys are scanned continuously, or when you expect the distribution to be normal (all elements likely accessed with the same probability)."
msgstr ""

#: ../../source/topics/lru-cache.rst:84
# 444d5e1d28604c5aa8ee059d12df4e6e
msgid "Use the **volatile-ttl** if you want to be able to provide hints to Redis about what are good candidate for expiration by using different TTL values when you create your cache objects."
msgstr ""

#: ../../source/topics/lru-cache.rst:88
# d93382193fb144ecb80545dbf8d3cc58
msgid "The **allkeys-lru** and **volatile-random** policies are mainly useful when you want to use a single instance for both caching and to have a set of persistent keys. However it is usually a better idea to run two Redis instances to solve such a problem."
msgstr ""

#: ../../source/topics/lru-cache.rst:93
# 499f9e95652343cf841650b447926a0c
msgid "It is also worth to note that setting an expire to a key costs memory, so using a policy like **allkeys-lru** is more memory efficient since there is no need to set an expire for the key to be evicted under memory pressure."
msgstr ""

#: ../../source/topics/lru-cache.rst:99
# be655b04fd5e417ba6ee3405a02fd369
msgid "How the eviction process works"
msgstr ""

#: ../../source/topics/lru-cache.rst:101
# c5916f9c10e34794ac2c0488f98f7b12
msgid "It is important to understand that the eviction process works like this:"
msgstr ""

#: ../../source/topics/lru-cache.rst:103
# 01f4df7fd8fd4729b562409ae315d5fc
msgid "A client runs a new command, resulting in more data added."
msgstr ""

#: ../../source/topics/lru-cache.rst:104
# 7c213497304c4bb7adca7eaf906d5912
msgid "Redis checks the memory usage, and if it is greater than the ``maxmemory`` limit , it evicts keys according to the policy."
msgstr ""

#: ../../source/topics/lru-cache.rst:106
# ee284a37b08b4c1c9a727c9a01050067
msgid "A new command is executed, and so forth."
msgstr ""

#: ../../source/topics/lru-cache.rst:108
# 816b3b24e6534687836b3a91ca2c18db
msgid "So we continuously cross the boundaries of the memory limit, by going over it, and then by evicting keys to return back under the limits."
msgstr ""

#: ../../source/topics/lru-cache.rst:111
# 21e53f69821f48d598df8cb203e3c8f5
msgid "If a command results in a lot of memory being used (like a big set intersection stored into a new key) for some time the memory limit can be surpassed by a noticeable amount."
msgstr ""

#: ../../source/topics/lru-cache.rst:116
# a7188d719b754d25a64b377798b704a4
msgid "Approximated LRU algorithm"
msgstr ""

#: ../../source/topics/lru-cache.rst:118
# ef35ca5068f643dfb72f27d3ec3a5621
msgid "Redis LRU algorithm is not an exact implementation. This means that Redis is not able to pick the *best candidate* for eviction, that is, the access that was accessed the most in the past. Instead it will try to run an approximation of the LRU algorithm, by sampling a small number of keys, and evicting the one that is the best (with the oldest access time) among the sampled keys."
msgstr ""

#: ../../source/topics/lru-cache.rst:125
# 62ad58f47317476184d6e9c5034d52d2
msgid "However since Redis 3.0 (that is currently in beta) the algorithm was improved to also take a pool of good candidates for eviction. This improved the performance of the algorithm, making it able to approximate more closely the behavior of a real LRU algorithm."
msgstr ""

#: ../../source/topics/lru-cache.rst:130
# 0d58badbd83c4999b05a101908e8359d
msgid "What is important about the Redis LRU algorithm is that you **are able to tune** the precision of the algorithm by changing the number of samples to check for every eviction. This parameter is controlled by the following configuration directive:"
msgstr ""

#: ../../source/topics/lru-cache.rst:139
# 824367644b9e4042ac361ff5c99378cd
msgid "The reason why Redis does not use a true LRU implementation is because it costs more memory. However the approximation is virtually equivalent for the application using Redis. The following is a graphical comparison of how the LRU approximation used by Redis compares with true LRU."
msgstr ""

#: ../../source/topics/lru-cache.rst:147
# b510914c01bb457ea8a3548d48cbaeba
msgid "LRU comparison"
msgstr ""

#: ../../source/topics/lru-cache.rst:148
# 30f6c2bfe0144216b76cdeb4cf414bfe
msgid "The test to generate the above graphs filled a Redis server with a given number of keys. The keys were accessed from the first to the last, so that the first keys are the best candidates for eviction using an LRU algorithm. Later more 50% of keys are added, in order to force half of the old keys to be evicted."
msgstr ""

#: ../../source/topics/lru-cache.rst:154
# 67c54df29a9340ef9109fecaec4ceb28
msgid "You can see three kind of dots in the graphs, forming three distinct bands."
msgstr ""

#: ../../source/topics/lru-cache.rst:157
# 6649356980ee48c595e223170759e815
msgid "The light gray band are objects that were evicted."
msgstr ""

#: ../../source/topics/lru-cache.rst:158
# 4aece915c90049dc94ab52614e211fbe
msgid "The gray band are objects that were not evicted."
msgstr ""

#: ../../source/topics/lru-cache.rst:159
# e37456e78d2b44178ff48e23f3917025
msgid "The green band are objects that were added."
msgstr ""

#: ../../source/topics/lru-cache.rst:161
# 03b6dff429ec498aa168a9eb6d919581
msgid "In a theoretical LRU implementation we expect that, among the old keys, the first half will be expired. The Redis LRU algorithm will instead only *probabilistically* expire the older keys."
msgstr ""

#: ../../source/topics/lru-cache.rst:165
# a05cb084d4db440393e36dd38e235d11
msgid "As you can see Redis 3.0 does a better job with 5 samples compared to Redis 2.8, however most objects that are among the latest accessed are still retained by Redis 2.8. Using a sample size of 10 in Redis 3.0 the approximation is very close to the theoretical performance of Redis 3.0."
msgstr ""

#: ../../source/topics/lru-cache.rst:170
# fba6fdd5c26847b6a83fa7783b68489a
msgid "Note that LRU is just a model to predict how likely a given key will be accessed in the future. Moreover, if your data access pattern closely resembles the power law, most of the accesses will be in the set of keys that the LRU approximated algorithm will be able to handle well."
msgstr ""

#: ../../source/topics/lru-cache.rst:175
# 836fd199037c4448a7f2024f71d874af
msgid "In simulations we found that using a power law access pattern, the difference between true LRU and Redis approximation were minimal or non-existent."
msgstr ""

#: ../../source/topics/lru-cache.rst:179
# 593074351ed14cfda879f2bfc60735d8
msgid "However you can raise the sample size to 10 at the cost of some additional CPU usage in order to closely approximate true LRU, and check if this makes a difference in your cache misses rate."
msgstr ""

#: ../../source/topics/lru-cache.rst:183
# 348aa3d1695148b09be118f09ff8960f
msgid "To experiment in production with different values for the sample size by using the ``CONFIG SET maxmemory-samples <count>`` command, is very simple."
msgstr ""

